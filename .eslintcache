[{"D:\\my-app\\src\\index.js":"1","D:\\my-app\\src\\App.js":"2","D:\\my-app\\src\\serviceWorker.js":"3","D:\\my-app\\src\\reponsive.js":"4","D:\\my-app\\src\\config\\clientConfig.js":"5","D:\\my-app\\src\\styles\\customTheme.js":"6","D:\\my-app\\src\\routes.js":"7","D:\\my-app\\src\\views.js":"8","D:\\my-app\\src\\styles\\themefile\\darktheme.js":"9","D:\\my-app\\src\\styles\\themefile\\lightTheme.js":"10","D:\\my-app\\src\\commons\\index.js":"11","D:\\my-app\\src\\styles\\genricStyle.js":"12","D:\\my-app\\src\\PrivateRoutes.js":"13","D:\\my-app\\src\\components\\Main.js":"14","D:\\my-app\\src\\components\\about\\officeBeareres.js":"15","D:\\my-app\\src\\components\\tournaments\\viewsDraws.js":"16","D:\\my-app\\src\\components\\tournaments\\tornament.js":"17","D:\\my-app\\src\\components\\about\\ClubAsscoc.js":"18","D:\\my-app\\src\\components\\legal\\legal.js":"19","D:\\my-app\\src\\components\\players\\playerList.js":"20","D:\\my-app\\src\\components\\news\\newsinfo.js":"21","D:\\my-app\\src\\components\\players\\ranking.js":"22","D:\\my-app\\src\\components\\news\\detailednews.js":"23","D:\\my-app\\src\\components\\login\\registerSteps.js":"24","D:\\my-app\\src\\components\\login\\fogotPassword.js":"25","D:\\my-app\\src\\responsiveComp\\clubAssoc.js":"26","D:\\my-app\\src\\components\\login\\registerPlayer.js":"27","D:\\my-app\\src\\responsiveComp\\ranking.js":"28","D:\\my-app\\src\\components\\login\\login.js":"29","D:\\my-app\\src\\responsiveComp\\regsteps.js":"30","D:\\my-app\\src\\components\\login\\dashboardcomp\\dashboard.js":"31","D:\\my-app\\src\\responsiveComp\\viewsDraws.js":"32","D:\\my-app\\src\\responsiveComp\\playerList.js":"33","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\showdraws.js":"34","D:\\my-app\\src\\components\\contact\\contact.js":"35","D:\\my-app\\src\\commons\\uiCommons.js":"36","D:\\my-app\\src\\commons\\userfunc.js":"37","D:\\my-app\\src\\commons\\userAuth.js":"38","D:\\my-app\\src\\AUTHSevice.js":"39","D:\\my-app\\src\\components\\tournaments\\prolegue.js":"40","D:\\my-app\\src\\APIService.js":"41","D:\\my-app\\src\\formdata\\formvalues.js":"42","D:\\my-app\\src\\components\\landingPage\\home.js":"43","D:\\my-app\\src\\components\\landingPage\\TopBar.js":"44","D:\\my-app\\src\\genricSceen\\officebeares.js":"45","D:\\my-app\\src\\components\\tournaments\\ViewsDraws\\viewEntries.js":"46","D:\\my-app\\src\\components\\MobileView\\mobileView.js":"47","D:\\my-app\\src\\components\\MobileView\\playerlistView.js":"48","D:\\my-app\\src\\commons\\genricComponents\\infoComponent.js":"49","D:\\my-app\\src\\commons\\genricComponents\\pageloader.js":"50","D:\\my-app\\src\\commons\\genricComponents\\fontAwsomicon.js":"51","D:\\my-app\\src\\commons\\genricComponents\\titlize.js":"52","D:\\my-app\\src\\commons\\genricComponents\\fieldIcon.js":"53","D:\\my-app\\src\\commons\\formfunction.js":"54","D:\\my-app\\src\\commons\\genricComponents\\snackbar.js":"55","D:\\my-app\\src\\components\\typo\\map.js":"56","D:\\my-app\\src\\formdata\\index.js":"57","D:\\my-app\\src\\globalUrls.js":"58","D:\\my-app\\src\\components\\MobileView\\responsiveListDilouge.js":"59","D:\\my-app\\src\\components\\contact\\assocList.js":"60","D:\\my-app\\src\\formdata\\matchdata.js":"61","D:\\my-app\\src\\formdata\\registeredclub.js":"62","D:\\my-app\\src\\formdata\\dashboardList.js":"63","D:\\my-app\\src\\formdata\\editDetils.js":"64","D:\\my-app\\src\\formdata\\drawresults.js":"65","D:\\my-app\\src\\formdata\\schedule.js":"66","D:\\my-app\\src\\formdata\\changePasswordFrom.js":"67","D:\\my-app\\src\\formdata\\eventsubscriptionlist.js":"68","D:\\my-app\\src\\formdata\\registerPlayer.js":"69","D:\\my-app\\src\\formdata\\verificationsteps.js":"70","D:\\my-app\\src\\formdata\\regex.js":"71","D:\\my-app\\src\\formdata\\formFields.js":"72","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\viewProspectus.js":"73","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\showResults.js":"74","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\userProfile.js":"75","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\scheduletour.js":"76","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\GiveEntries.js":"77","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\idverifiction.js":"78","D:\\my-app\\src\\components\\tournaments\\ViewsDraws\\drawsDialouge.js":"79","D:\\my-app\\src\\commons\\genricComponents\\formGenerator.js":"80","D:\\my-app\\src\\components\\login\\dashboardcomp\\genicPayemnt.js":"81","D:\\my-app\\src\\formdata\\clubassocid.js":"82","D:\\my-app\\src\\formdata\\tableIcons.js":"83","D:\\my-app\\src\\formdata\\button.js":"84","D:\\my-app\\src\\formdata\\registeredAssociation.js":"85","D:\\my-app\\src\\components\\players\\dialouges\\baseDialouge.js":"86","D:\\my-app\\src\\formdata\\viewDrawsMenu.js":"87","D:\\my-app\\src\\formdata\\statistics.js":"88","D:\\my-app\\src\\formdata\\playerDetailsCol.js":"89","D:\\my-app\\src\\components\\about\\registeredClub.js":"90","D:\\my-app\\src\\components\\about\\registeredAssoc.js":"91","D:\\my-app\\src\\components\\tournaments\\ViewsDraws\\draws.js":"92","D:\\my-app\\src\\genricSceen\\registerdClub.js":"93","D:\\my-app\\src\\components\\landingPage\\linkpage.js":"94","D:\\my-app\\src\\formdata\\standings.js":"95","D:\\my-app\\src\\formdata\\menuData.js":"96","D:\\my-app\\src\\config\\bannerConfig.js":"97","D:\\my-app\\src\\components\\socialMediaExtracts\\mediaExtracts.js":"98","D:\\my-app\\src\\commons\\genricComponents\\imageClass.js":"99","D:\\my-app\\src\\components\\landingPage\\Sponsers.js":"100","D:\\my-app\\src\\components\\landingPage\\RegisteredAssoc.js":"101","D:\\my-app\\src\\components\\landingPage\\RegistredCulb.js":"102","D:\\my-app\\src\\components\\landingPage\\OfficeBearers.js":"103","D:\\my-app\\src\\components\\landingPage\\StatisticsContent.js":"104","D:\\my-app\\src\\components\\landingPage\\StandingContent.js":"105","D:\\my-app\\src\\components\\landingPage\\NewsContent.js":"106","D:\\my-app\\src\\components\\landingPage\\Footer.js":"107","D:\\my-app\\src\\components\\login\\dashboardcomp\\logout.js":"108","D:\\my-app\\src\\components\\MobileView\\rankingView.js":"109","D:\\my-app\\src\\components\\players\\dialouges\\tabledisplay.js":"110","D:\\my-app\\src\\genricSceen\\newsPage.js":"111","D:\\my-app\\src\\components\\tournaments\\commitedetails.js":"112","D:\\my-app\\src\\commons\\genricComponents\\charts.js":"113","D:\\my-app\\src\\components\\MobileView\\responsiveDialouge.js":"114","D:\\my-app\\src\\formdata\\playerlist.js":"115","D:\\my-app\\src\\formdata\\rankingRespTableData.js":"116"},{"size":459,"mtime":1610348195863,"results":"117","hashOfConfig":"118"},{"size":633,"mtime":1610568391836,"results":"119","hashOfConfig":"118"},{"size":4948,"mtime":1608785972622,"results":"120","hashOfConfig":"118"},{"size":1065,"mtime":1610410474461,"results":"121","hashOfConfig":"118"},{"size":92,"mtime":1610564176270,"results":"122","hashOfConfig":"118"},{"size":4421,"mtime":1610409372817,"results":"123","hashOfConfig":"118"},{"size":4243,"mtime":1610410602581,"results":"124","hashOfConfig":"118"},{"size":647,"mtime":1608785972658,"results":"125","hashOfConfig":"118"},{"size":2723,"mtime":1610409330037,"results":"126","hashOfConfig":"118"},{"size":354,"mtime":1610409388133,"results":"127","hashOfConfig":"118"},{"size":152,"mtime":1608785964729,"results":"128","hashOfConfig":"118"},{"size":10276,"mtime":1610427257494,"results":"129","hashOfConfig":"118"},{"size":1916,"mtime":1610410314457,"results":"130","hashOfConfig":"118"},{"size":381,"mtime":1610407011517,"results":"131","hashOfConfig":"118"},{"size":639,"mtime":1610309533743,"results":"132","hashOfConfig":"118"},{"size":3953,"mtime":1610348433565,"results":"133","hashOfConfig":"118"},{"size":11269,"mtime":1610564591690,"results":"134","hashOfConfig":"118"},{"size":3664,"mtime":1610315629109,"results":"135","hashOfConfig":"118"},{"size":6739,"mtime":1610350690467,"results":"136","hashOfConfig":"118"},{"size":4121,"mtime":1610421234407,"results":"137","hashOfConfig":"118"},{"size":474,"mtime":1610320917273,"results":"138","hashOfConfig":"118"},{"size":9439,"mtime":1610414322293,"results":"139","hashOfConfig":"118"},{"size":3253,"mtime":1610564418001,"results":"140","hashOfConfig":"118"},{"size":8497,"mtime":1610428575773,"results":"141","hashOfConfig":"118"},{"size":11327,"mtime":1610421632603,"results":"142","hashOfConfig":"118"},{"size":856,"mtime":1610407730757,"results":"143","hashOfConfig":"118"},{"size":13241,"mtime":1610421929536,"results":"144","hashOfConfig":"118"},{"size":674,"mtime":1610408954700,"results":"145","hashOfConfig":"118"},{"size":7681,"mtime":1610421985159,"results":"146","hashOfConfig":"118"},{"size":844,"mtime":1608785971726,"results":"147","hashOfConfig":"118"},{"size":19355,"mtime":1610422248135,"results":"148","hashOfConfig":"118"},{"size":863,"mtime":1610409152843,"results":"149","hashOfConfig":"118"},{"size":663,"mtime":1610407751029,"results":"150","hashOfConfig":"118"},{"size":16458,"mtime":1610402638754,"results":"151","hashOfConfig":"118"},{"size":6340,"mtime":1610352074696,"results":"152","hashOfConfig":"118"},{"size":650,"mtime":1610313746517,"results":"153","hashOfConfig":"118"},{"size":3926,"mtime":1610421834922,"results":"154","hashOfConfig":"118"},{"size":1939,"mtime":1610421104723,"results":"155","hashOfConfig":"118"},{"size":397,"mtime":1610409625883,"results":"156","hashOfConfig":"118"},{"size":1800,"mtime":1610421692656,"results":"157","hashOfConfig":"118"},{"size":602,"mtime":1610301570211,"results":"158","hashOfConfig":"118"},{"size":853,"mtime":1610567809970,"results":"159","hashOfConfig":"118"},{"size":2818,"mtime":1610390788199,"results":"160","hashOfConfig":"118"},{"size":13511,"mtime":1610402275244,"results":"161","hashOfConfig":"118"},{"size":10062,"mtime":1610407470208,"results":"162","hashOfConfig":"118"},{"size":5602,"mtime":1610564527289,"results":"163","hashOfConfig":"118"},{"size":1567,"mtime":1610312861359,"results":"164","hashOfConfig":"118"},{"size":5942,"mtime":1610414648233,"results":"165","hashOfConfig":"118"},{"size":351,"mtime":1610315334627,"results":"166","hashOfConfig":"118"},{"size":3027,"mtime":1610325587248,"results":"167","hashOfConfig":"118"},{"size":1014,"mtime":1610429079822,"results":"168","hashOfConfig":"118"},{"size":149,"mtime":1610428938242,"results":"169","hashOfConfig":"118"},{"size":722,"mtime":1610429041143,"results":"170","hashOfConfig":"118"},{"size":5580,"mtime":1610317951498,"results":"171","hashOfConfig":"118"},{"size":1268,"mtime":1610428963707,"results":"172","hashOfConfig":"118"},{"size":3734,"mtime":1610406997268,"results":"173","hashOfConfig":"118"},{"size":1431,"mtime":1610413446900,"results":"174","hashOfConfig":"118"},{"size":491,"mtime":1610410214400,"results":"175","hashOfConfig":"118"},{"size":8876,"mtime":1610564376021,"results":"176","hashOfConfig":"118"},{"size":5403,"mtime":1610306611636,"results":"177","hashOfConfig":"118"},{"size":58150,"mtime":1608785968999,"results":"178","hashOfConfig":"118"},{"size":20556,"mtime":1608785969281,"results":"179","hashOfConfig":"118"},{"size":1329,"mtime":1610567715762,"results":"180","hashOfConfig":"118"},{"size":1938,"mtime":1610567732188,"results":"181","hashOfConfig":"118"},{"size":1133,"mtime":1610319492346,"results":"182","hashOfConfig":"118"},{"size":2339,"mtime":1610137160196,"results":"183","hashOfConfig":"118"},{"size":759,"mtime":1610567682643,"results":"184","hashOfConfig":"118"},{"size":193,"mtime":1610567908327,"results":"185","hashOfConfig":"118"},{"size":2436,"mtime":1610568071832,"results":"186","hashOfConfig":"118"},{"size":365,"mtime":1610568218485,"results":"187","hashOfConfig":"118"},{"size":1852,"mtime":1610568036365,"results":"188","hashOfConfig":"118"},{"size":479,"mtime":1610567849702,"results":"189","hashOfConfig":"118"},{"size":2826,"mtime":1609991246935,"results":"190","hashOfConfig":"118"},{"size":4088,"mtime":1610427815902,"results":"191","hashOfConfig":"118"},{"size":10375,"mtime":1610427986862,"results":"192","hashOfConfig":"118"},{"size":3986,"mtime":1610399495737,"results":"193","hashOfConfig":"118"},{"size":14027,"mtime":1610424022116,"results":"194","hashOfConfig":"118"},{"size":5131,"mtime":1610324971684,"results":"195","hashOfConfig":"118"},{"size":4272,"mtime":1610564489077,"results":"196","hashOfConfig":"118"},{"size":10134,"mtime":1610429101160,"results":"197","hashOfConfig":"118"},{"size":2457,"mtime":1610324727402,"results":"198","hashOfConfig":"118"},{"size":383,"mtime":1610315609451,"results":"199","hashOfConfig":"118"},{"size":2278,"mtime":1610568180468,"results":"200","hashOfConfig":"118"},{"size":2404,"mtime":1610567658767,"results":"201","hashOfConfig":"118"},{"size":17545,"mtime":1609803195647,"results":"202","hashOfConfig":"118"},{"size":2323,"mtime":1610564289555,"results":"203","hashOfConfig":"118"},{"size":460,"mtime":1610568257125,"results":"204","hashOfConfig":"118"},{"size":218,"mtime":1610568146104,"results":"205","hashOfConfig":"118"},{"size":238,"mtime":1610567960075,"results":"206","hashOfConfig":"118"},{"size":510,"mtime":1610317111358,"results":"207","hashOfConfig":"118"},{"size":6319,"mtime":1610307058652,"results":"208","hashOfConfig":"118"},{"size":4091,"mtime":1610564499147,"results":"209","hashOfConfig":"118"},{"size":13932,"mtime":1610407537417,"results":"210","hashOfConfig":"118"},{"size":1147,"mtime":1610318662512,"results":"211","hashOfConfig":"118"},{"size":1330,"mtime":1610568126462,"results":"212","hashOfConfig":"118"},{"size":1894,"mtime":1610567889914,"results":"213","hashOfConfig":"118"},{"size":419,"mtime":1610564160278,"results":"214","hashOfConfig":"118"},{"size":4937,"mtime":1610417639719,"results":"215","hashOfConfig":"118"},{"size":344,"mtime":1610390665976,"results":"216","hashOfConfig":"118"},{"size":2621,"mtime":1610390883571,"results":"217","hashOfConfig":"118"},{"size":2954,"mtime":1610428077837,"results":"218","hashOfConfig":"118"},{"size":551,"mtime":1610352035249,"results":"219","hashOfConfig":"118"},{"size":299,"mtime":1610390803629,"results":"220","hashOfConfig":"118"},{"size":936,"mtime":1610351974109,"results":"221","hashOfConfig":"118"},{"size":3248,"mtime":1610428101676,"results":"222","hashOfConfig":"118"},{"size":315,"mtime":1610318005653,"results":"223","hashOfConfig":"118"},{"size":1365,"mtime":1610428288600,"results":"224","hashOfConfig":"118"},{"size":1670,"mtime":1610422025606,"results":"225","hashOfConfig":"118"},{"size":8524,"mtime":1610412525212,"results":"226","hashOfConfig":"118"},{"size":2975,"mtime":1610564264782,"results":"227","hashOfConfig":"118"},{"size":10149,"mtime":1610407485006,"results":"228","hashOfConfig":"118"},{"size":5297,"mtime":1610564555111,"results":"229","hashOfConfig":"118"},{"size":2274,"mtime":1610429074011,"results":"230","hashOfConfig":"118"},{"size":6201,"mtime":1610413500747,"results":"231","hashOfConfig":"118"},{"size":1688,"mtime":1610567976547,"results":"232","hashOfConfig":"118"},{"size":329,"mtime":1610567998763,"results":"233","hashOfConfig":"118"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},"1p52f7e",{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"236"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"236"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"236"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"236"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"236"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"301"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"236"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"236"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"236"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"236"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"236"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"236"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"395"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"236"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"236"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"408"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"411","messages":"412","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"236"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"417"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"236"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"236"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"236"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\my-app\\src\\index.js",[],["491","492"],"D:\\my-app\\src\\App.js",[],"D:\\my-app\\src\\serviceWorker.js",[],"D:\\my-app\\src\\reponsive.js",[],"D:\\my-app\\src\\config\\clientConfig.js",[],"D:\\my-app\\src\\styles\\customTheme.js",[],"D:\\my-app\\src\\routes.js",[],"D:\\my-app\\src\\views.js",[],"D:\\my-app\\src\\styles\\themefile\\darktheme.js",[],"D:\\my-app\\src\\styles\\themefile\\lightTheme.js",[],"D:\\my-app\\src\\commons\\index.js",[],"D:\\my-app\\src\\styles\\genricStyle.js",[],"D:\\my-app\\src\\PrivateRoutes.js",[],"D:\\my-app\\src\\components\\Main.js",[],"D:\\my-app\\src\\components\\about\\officeBeareres.js",[],"D:\\my-app\\src\\components\\tournaments\\viewsDraws.js",[],"D:\\my-app\\src\\components\\tournaments\\tornament.js",[],"D:\\my-app\\src\\components\\about\\ClubAsscoc.js",["493"],"import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {  withRouter } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Topbar from \"../landingPage/TopBar\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport customStyles from \"../../styles/genricStyle\"\nimport {aboutMenu }from \"../../formdata\"\n\n\n\n\nimport {\n \n    AppBar,\n    Toolbar,\n   \n    Tabs,\n    Tab,\n   \n} from \"@material-ui/core\";\n\n\n\nclass ClubAssociation extends Component {\n    state = {\n        value:this.props.location.asssocval?this.props.location.asssocval: 0,\n      \n    };\n\n    handleChange = (event, index\n    ) => {\n       \n        this.setState({\n            value: index,\n          \n        });\n    };\n    //display component\n    showComp = (index) => {\n\n\n        let Found = aboutMenu.find(item => item.value === index);\n\n        if (Found) return <div><Found.component /></div>\n\n\n        return false;\n    };\n\n\n    componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { value} = this.state;\n    \n\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <Topbar index={0}  />\n\n\n              \n              \n                    <div className={classes.root}>\n\n\n\n                        <AppBar position=\"static\" color=\"default\">\n                            <Toolbar>\n                                <Grid container spacing={1}>\n\n\n                                    <Grid\n                                        item\n                                        md={8}\n                                        sm={8}\n                                        xs={8}\n                                        style={{ justifyContent: \"left\" }}\n                                    >\n\n\n\n                                        <div className={classes.tabContainer}>\n\n\n\n                                            <Tabs\n                                                onChange={this.handleChange}\n                                                value={value}\n                                                indicatorColor=\"primary\"\n                                                classes={{\n                                                    indicator: classes.indicator\n                                                }}\n                                              \n\n                                            >\n                                                {aboutMenu.map((item, index) => {\n\n                                                    return (\n                                                        <Tab\n                                                            key={index}\n                                                            selected\n\n\n\n                                        \n\n\n                                                          \n                                                            label={item.label}\n\n                                                        />\n\n\n\n                                                    );\n\n                                                })}\n\n                                            </Tabs>\n\n\n\n\n\n                                        </div>\n\n\n                                    </Grid>\n                                </Grid>\n                            </Toolbar>\n                        </AppBar>\n                        {this.showComp(value)}\n\n\n\n\n                    </div>\n             \n            </React.Fragment>\n        );\n\n    }\n}\n\nexport default withRouter(withStyles(customStyles)(ClubAssociation));\n","D:\\my-app\\src\\components\\legal\\legal.js",[],"D:\\my-app\\src\\components\\players\\playerList.js",[],"D:\\my-app\\src\\components\\news\\newsinfo.js",[],"D:\\my-app\\src\\components\\players\\ranking.js",[],"D:\\my-app\\src\\components\\news\\detailednews.js",["494","495"],"D:\\my-app\\src\\components\\login\\registerSteps.js",["496","497","498"],"import Typography from \"@material-ui/core/Typography\";\n\nimport React  from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport FormGenerator from \"../../commons/genricComponents/formGenerator\";\nimport { formFileds } from \"../../formdata\"\nimport Container from '@material-ui/core/Container';\nimport formValidation from \"../../commons/formfunction\";\nimport customStyles from \"../../styles/genricStyle\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Topbar from \"../../components/landingPage/TopBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { ApiCall } from \"../../APIService\";\nimport { commons } from \"../../commons\";\n\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport { steps } from \"../../formdata\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from \"@material-ui/core/Avatar\";\n\nclass registerSteps extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stepperdata: steps,\n      \"otpStatus\": false,\n      \"pwdStatus\": false,\n      \"otpbutton\": false,\n      \"otpMessage\": \"\",\n      \"pwdMessage\": \"\",\n      \"checked\": false,\n      otpcode: 0,\n      activeStep: 0,\n    };\n  }\n\n  handleNext = () => {\n    this.setState((state) => ({\n      activeStep: state.activeStep + 1,\n    }));\n  };\n\n  handleChange = (event) => {\n    this.setState((state) => ({\n      checked: !state.checked,\n    }));\n    \n  };\n//email veification\n  validateEmail = async () => {\n    const { formData } = this.state\n    let filteredata = [formData.find(item => item.id === \"email\")]\n\n    let formInputDataValid = await formValidation.validatelogin(filteredata);\n    let result = formInputDataValid.find((item) => {\n\n      if (item.error.length)\n        return item;\n      // this.setState({ \"otpbutton\": false, });\n    })\n\n\n    this.setState({ \"otpbutton\": false, \"otpMessage\": \"\", \"pwdMessage\": \"\" },\n\n\n\n    );\n\n\n    if (result === undefined) {\n\n      this.setState({ \"otpbutton\": true, },\n\n\n      );\n\n\n\n\n\n    }\n  }\n\n//otp generation\n  generateOtp = () => {\n\n\n    this.setState({\n\n      \"otpStatus\": false, \"otpMessage\": \"\", \"pwdStatus\": false, \"pwdMessage\": false\n    })\n    const data = {};\n    const formvalues = [...this.state.formData];\n    formvalues.map((obj) => {\n\n     \n      data[obj.key] = obj.value\n\n    });\n\n    let apiData = {};\n    apiData.type = \"regotp\";\n    apiData.caller = \"caller\";\n      apiData.apiKey = \"apikey\";\n    apiData.emailId = data.emailAddress;\n      this.setState({ loading: true });\n    ApiCall(\"POST\", apiData, \"core\")\n      .then(res => res.json())\n      .then(res => {\n        if (res.status === \"failure\") {\n          this.setState({ otpbutton: false, loading: false, \"otpMessage\": res.registerStatus })\n          this.resetForm();\n        }\n\n\n\n        if (res.status === \"success\") {\n          this.setState({ otpbutton: false, loading: false, \"otpStatus\": true, \"otpMessage\": res.message, \"otpcode\": res.verificationCode })\n          setTimeout(() => {\n            this.setState((state) => ({\n              otpMessage:\"\",\n              activeStep: state.activeStep + 1,\n            })\n          \n            );\n           \n          }, 2000);\n        }\n        else if (res.errors) {\n          this.setState({ loading: false, \"otpMessage\": res.errors.toString() })\n        }\n      }).catch(error => {\n        commons.errorLog(error)\n      });\n  }\n\n\n\n\n  onChange = (e) => {\n\n    let formDataInput = [...this.state.formData];\n    this.setState({ otpMessage: \"\", });\n    formDataInput.find((item) => {\n\n\n      \n\n        if (item.key === e.target.name && item.id === \"email\") {\n          item.value = e.target.value;\n          this.setState({ formData: formDataInput });\n          this.validateEmail()\n        }\n\n\n\n    })\n    this.setState({ formData: formDataInput });\n\n\n  }\n//handle change for stepper\n  changeStep = (activeStep) => {\n   \n    let { stepperdata}=this.state\n    let logObj = stepperdata.find(obj => obj[\"activestep\"] === activeStep)\n    if (logObj && logObj.component)\n      return <div><logObj.component update={this.state.formData} otp={this.state.otpcode} /></div>\n\n  }\n  \n\n \n\n  componentDidMount() {\n    const value = formFileds.filter(word => word.id ===\"email\")\n    let formDataControl = [...JSON.parse(JSON.stringify(value))];\n  \n\n    this.setState({\n      \"formData\": formDataControl,\n\n    })\n  }\n\n  render() {\n    const { classes, orientation } = this.props;\n\n    const { activeStep, checked, stepperdata, otpStatus,otpbutton, otpMessage } = this.state;\n\n    \n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Topbar index={3}  />\n        <div className={classes.root}>\n          {/* <Grid container justify=\"center\"> */}\n\n          <Paper elavation={10} square={false}>\n            <Grid container spacing={2} align=\"center\">\n              <Grid item md={12} sm={12} xs={12}>\n                <div>\n                  <Stepper activeStep={activeStep}\n                    orientation={orientation ? \"vertical\" :\"horizontal\"}\n                    alternativeLabel>\n                    {stepperdata.map((steps) => {\n                      return (\n                        <Step key={steps}>\n                          <StepLabel>{steps.label}</StepLabel>\n                        </Step>\n                      );\n                    })}\n                  </Stepper>\n               \n                  {(activeStep === 1) ? this.changeStep(1) :\n                   \n                    \n                      <Container maxWidth=\"sm\">\n                  \n\n                      <Card className={classes.card}>\n                        <CardHeader\n                          avatar={\n                            <Avatar aria-label=\"recipe\" style={{\n                              margin: 8,\n                            }}>\n                              R\n          </Avatar>\n                          }\n\n                          title=\"EMAIL VERIFICATION\"\n\n                        />\n                        <CardContent>\n                          <Grid container style={{ marginBottom: 20 }}>\n                            <Grid item  justifyContent=\"space-between\" sm={12} xs={12} md={8}>\n                              <FormControlLabel\n                                control={<Checkbox checked={this.state.checked} />}\n                                onChange={this.handleChange}\n                                style={{ margin: 0 }}\n                              />\n                              <Typography variant=\"subtitle1\" component=\"span\">\n                                KTTA Registration for 2020-2021\n                                            </Typography>\n                            </Grid>\n\n                            <Grid item sm={12} xs={12} md={4}>\n\n                              <Typography variant=\"subtitle1\" style={{ padding: 8 }} >\n                                Rs 500/-\n                                            </Typography>\n\n                            </Grid>\n\n\n\n\n\n\n\n                          </Grid>\n\n\n                          <FormGenerator\n                            formList={this.state.formData}\n\n                            onChange={this.onChange} />\n\n                        </CardContent>\n\n                        {(otpbutton && checked) ? <Button\n                          style={{ marginTop: 15 }}\n                          size=\"small\"\n                          onClick={this.generateOtp}>Generate OTP</Button> : \"\"}\n\n                        {otpStatus ? <span className={classes.success}>\n                          {otpMessage}\n                        </span> :\n                          <span className={classes.error}> {otpMessage}</span>}\n\n                      </Card>\n                      </Container>\n                    \n                  \n                  \n                 \n                   }\n                 \n                 \n              \n                 \n\n                </div>\n              </Grid>\n            </Grid>\n\n          \n          </Paper>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(customStyles)(registerSteps);\n","D:\\my-app\\src\\components\\login\\fogotPassword.js",["499","500","501","502","503"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {withRouter } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport customStyles from \"../../styles/genricStyle\";\nimport Topbar from \"../../components/landingPage/TopBar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { ApiCall } from \"../../APIService\";\nimport formValidation from \"../../commons/formfunction\";\nimport Container from \"@material-ui/core/Container\";\n\nimport { changePasswordForm } from \"../../formdata\";\nimport FormGenerator from \"../../commons/genricComponents/formGenerator\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport { DialogActions } from \"@material-ui/core\";\nimport { commons } from \"../../commons\";\nimport RefreshLoader from \"../../commons/genricComponents/pageloader\";\nclass FogotPassword extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formData: [],\n      otpStatus: false,\n      pwdStatus: false,\n      otpbutton: false,\n      otpMessage: \"\",\n      pwdMessage: \"\",\n      loading: false,\n      dialogOpen: false,\n      otpcode: 0,\n    };\n    this.verifyForm = this.verifyForm.bind(this);\n\n    this.handleDialog = this.handleDialog.bind(this);\n  }\n\n  componentDidMount() {\n    //password change fields\n    let formDataControl = [...JSON.parse(JSON.stringify(changePasswordForm))];\n  \n\n    this.setState({\n      formData: formDataControl,\n    });\n  }\n//form reset\n  resetForm = () => {\n    let formDataControl = [...JSON.parse(JSON.stringify(changePasswordForm))];\n  \n\n    this.setState({\n      formData: formDataControl,\n      otpStatus: false,\n    });\n  };\n  handleDialog = () => {\n    this.setState({ dialogOpen: false });\n    this.props.history.push(\"/login\");\n  };\n//otp valdiation\n  showotpval = async () => {\n    const { formData } = this.state;\n    let filteredata = [formData.find((item) => item.id === \"email\")];\n\n    let formInputDataValid = await formValidation.genricFromValidation(filteredata);\n    let result = formInputDataValid.find((item) => {\n      if (item.error.length) return item;\n  \n    });\n\n    this.setState({ otpbutton: false, otpMessage: \"\", pwdMessage: \"\" });\n\n    if (result === undefined) {\n      this.setState({ otpbutton: true });\n    }\n  };\n//api call for otp generation\n  generateOtp = () => {\n    this.setState({\n      otpStatus: false,\n      otpMessage: \"\",\n      pwdStatus: false,\n      pwdMessage: false,\n    });\n    const data = {};\n    const formvalues = [...this.state.formData];\n    formvalues.map((obj) => {\n      data[obj.key] = obj.value;\n    });\n\n    let apiData = {};\n    apiData.type = \"forgot\";\n  \n    apiData.caller = \"caller\";\n     apiData.apiKey = \"apikey\";\n    apiData.emailId = data.email;\n     this.setState({ loading: true });\n    ApiCall(\"POST\", apiData, \"core\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.status === \"failure\"){\n\n        \n          this.setState({\n            otpbutton: false,\n            loading: false,\n            otpMessage: res.message,\n          });\n        }\n        if (res.status === \"success\") {\n          this.setState({\n            otpbutton: false,\n            otpStatus: true,\n            loading: false,\n            otpMessage: res.message,\n            otpcode: res.verificationCode,\n          });\n        } else if (res.errors) {\n          this.setState({ otpMessage: res.errors.toString() })\n        }\n      })\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n//api call for submitting new password\n  verifyForm = async (e) => {\n    e.preventDefault();\n    this.setState({ pwdMessage: \"\" });\n    let formData = this.state.formData;\n\n    formData = await formValidation.genricFromValidation(\n      formData,\n      this.state.otpcode\n    );\n\n    let result = formData.find((item) => {\n      if (item && item.error.length) return item;\n    });\n\n    this.setState({ formData: formData });\n\n    if (result === undefined) {\n      const data = {};\n      const formvalues = this.state.formData;\n      formvalues.map((obj) => {\n        data[obj.id] = obj.value;\n      });\n\n      let apiData = {};\n      apiData.type = \"newpass\";\n    \n      apiData.caller = \"caller\"; \n      apiData.apiKey = \"apikey\";\n      apiData.verificationCode = data.otp;\n        apiData.userId = data.email;\n        apiData.password = data.confirmPassword;\n\n      this.setState({ loading: true });\n      ApiCall(\"POST\", apiData, \"core\")\n        .then((res) => res.json())\n        .then((res) => {\n          if (res.message) {\n            this.setState({ pwdMessage: res.message });\n            this.resetForm();\n          }\n          if (res.status === \"success\") {\n            this.setState({\n              pwdStatus: true,\n              loading: false,\n              dialogOpen: true,\n            });\n            this.resetForm();\n          }\n        })\n        .catch((error) => {\n          commons.errorLog(error);\n        });\n    }\n  };\n //change handler for input fileds of form.\n  onChange = (e) => {\n    let formDataInput = [...this.state.formData];\n    this.setState({ otpMessage: \"\" });\n    formDataInput.find((item) => {\n      if (item.key === e.target.name) {\n        item.type === \"number\"\n          ? (item.value = parseInt(e.target.value))\n          : (item.value = e.target.value);\n\n        if (item.key === e.target.name && item.type !== \"string\")\n          item.value = e.target.value;\n        if (item.type === \"date\") {\n          //  let formatDate = moment(e.target.value).format('DD-MM-YYYY');\n          //  item.value = formatDate\n        }\n        if (item.key === e.target.name && item.type === \"string\") {\n          item.value = e.target.value;\n          this.setState({ formData: formDataInput });\n          this.showotpval();\n        }\n      }\n    });\n    this.setState({ formData: formDataInput });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n    \n      otpStatus,\n      pwdStatus,\n      otpMessage,\n      loading,\n      otpbutton,\n      pwdMessage,\n      dialogOpen,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Topbar index={3} />\n        <div className={classes.root}>\n          <Paper className={classes.paper}>\n            <RefreshLoader display=\"overlay\" loading={loading} />\n            <Grid\n              justify=\"center\"\n              alignItems=\"center\"\n              container\n              style={{\n                marginTop: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n           \n            >\n              <Avatar\n                style={{\n                  margin: 8,\n                  backgroundColor: \"red\",\n                }}\n              >\n                <LockOpenIcon />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Change Password\n              </Typography>\n            </Grid>\n\n            <Container maxWidth=\"xs\">\n              <form>\n                <FormGenerator\n                  formList={this.state.formData}\n                  onChange={this.onChange}\n                  xx={123}\n                />\n                {/* {formData.map((item, index) => {\n                                    const styleObj = {};\n                                    if (item.hidden) styleObj[\"display\"] = \"none\";\n\n                                    return (<TextField\n                                        key={index}\n                                        variant='outlined'\n                                        type={item.type}\n                                        disabled={item.disabled ? true : false}\n                                        hidden={item.hidden ? true : false}\n                                        label={item.hidden ? '' : item.displayName}\n                                        name={item.key}\n                                        fullWidth\n                                        margin=\"normal\"\n                                        value={item.value}\n                                        onChange={this.onChange}\n                                        error={item.error.length ? true : false}\n                                        helperText={item.error}\n                                        autoComplete=\"off\"\n                                        style={styleObj}\n                                    />)\n\n                                })} */}\n                {otpbutton ? (\n                  <Button\n                    style={{ marginBottom: 10 }}\n                    size=\"small\"\n                    onClick={this.generateOtp}\n                  >\n                    Request OTP\n                  </Button>\n                ) : (\n                  \"\"\n                )}\n\n                <Button\n                  onClick={this.verifyForm}\n                  fullWidth\n                  disabled={otpStatus ? false : true}\n                >\n                  Submit\n                </Button>\n\n                {otpStatus ? (\n                  <span className={classes.success}>{otpMessage}</span>\n                ) : (\n                  <span className={classes.error}> {otpMessage}</span>\n                )}\n\n                <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                  <div>\n                    <Dialog\n                      open={dialogOpen}\n                      aria-labelledby=\"alert-dialog-title\"\n                      aria-describedby=\"alert-dialog-description\"\n                    >\n                      <DialogTitle id=\"alert-dialog-title\">\n                        Password Reset\n                      </DialogTitle>\n                      {pwdStatus ? (\n                        <DialogContent>\n                          <DialogContentText id=\"alert-dialog-description\">\n                            {pwdMessage} successfully. Please login again\n                          </DialogContentText>\n                        </DialogContent>\n                      ) : (\n                        <DialogContent>\n                          <DialogContentText id=\"alert-dialog-description\">\n                            {pwdMessage}\n                          </DialogContentText>\n                        </DialogContent>\n                      )}\n                      <DialogActions>\n                        <Button\n                          color=\"primary\"\n                          autoFocus\n                          onClick={this.handleDialog}\n                        >\n                          Ok\n                        </Button>\n                      </DialogActions>\n                    </Dialog>\n                  </div>\n                </div>\n              </form>\n            </Container>\n          </Paper>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default withRouter(withStyles(customStyles)(FogotPassword));\n","D:\\my-app\\src\\responsiveComp\\clubAssoc.js",[],"D:\\my-app\\src\\components\\login\\registerPlayer.js",["504","505","506","507"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport {  withRouter } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport customStyles from \"../../styles/genricStyle\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { ApiCall } from \"../../APIService\";\nimport formValidation from \"../../commons/formfunction\";\nimport Container from \"@material-ui/core/Container\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { commons } from \"../../commons\";\nimport { registration, registred_clubs } from \"../../formdata\";\nimport FormGenerator from \"../../commons/genricComponents/formGenerator\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport RefreshLoader from \"../../commons/genricComponents/pageloader\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport { DialogActions } from \"@material-ui/core\";\nclass playerRegister extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formData: [],\n      emailfield: this.props.update,\n      otpcode: this.props.otp,\n      otpStatus: false,\n      pwdStatus: false,\n      otpbutton: false,\n      otpMessage: \"\",\n      pwdMessage: \"\",\n      order_id: {},\n      registredClub: [],\n      dialogOpen: false,\n      loading: false,\n      regfees: \"1\",\n      paymentid: \"\",\n      registredClubdu: registred_clubs,\n    };\n    this.verifyForm = this.verifyForm.bind(this);\n\n    this.handleDialog = this.handleDialog.bind(this);\n  }\n//api call for club data  which is used in dropdown  in registration form\n  loadClubData = () => {\n    let params = {};\n\n  \n    params.type = \"academylist\";\n\n    params.apiKey = \"apikey\";\n    params.caller = \"caller\";\n    params.data = { stateAssociationId: \"userid\" };\n\n    ApiCall(\"POST\", params, \"core\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (!res[\"status\"]) {\n          console.log(\"api error\" + res[\"status\"]);\n        }\n        return res;\n      })\n      .then((res) => {\n        this.setState({\n          registredClub: res[\"data\"],\n        });\n      })\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n\n  componentDidMount() {\n      //registration change fields\n    let emailvalue = this.state.emailfield;\n\n    let formDataControl = [...JSON.parse(JSON.stringify(registration))];\n   \n\n    formDataControl.map((item, index) => {\n      if (item.key === \"emailAddress\") {\n        item[\"value\"] = emailvalue[0].value;\n      }\n    });\n\n    this.setState({\n      formData: formDataControl,\n    });\n  }\n\n//clear fileds if registration fails\n  resetForm = () => {\n    let emailvalue = this.state.emailfield;\n\n    let formDataControl = [...JSON.parse(JSON.stringify(registration))];\n   \n\n    formDataControl.map((item, index) => {\n      if (item.key === \"emailAddress\") {\n        item[\"value\"] = emailvalue[0].value;\n      }\n    });\n\n    this.setState({\n      formData: formDataControl,\n      otpStatus: false,\n    });\n  };\n\n  //dialog for  registration completion message\n  handleDialog = () => {\n    this.setState({ dialogOpen: false });\n    this.props.history.push(\"/login\");\n  };\n\n\n\n\n//displaying payement modal\n  displayRazorpay = async (formdata) => {\n    const res = await commons.loadScript (\n      \"https://checkout.razorpay.com/v1/checkout.js\"\n    );\n\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n//function to get order_id to pass to options \n    await this.loadpaymentdata();\n     const options = {\n      key: \"rzp_live_kApuBzXGZuYXGG\",\n      currency: \"INR\",\n      amount: (parseInt(this.state.regfees) * 100).toString(),\n      order_id: this.state.order_id,\n      name: \"PLAYER REGISTRATION\",\n      description: \"Registration amount\",\n\n      handler: (response) => {\n        alert(response.razorpay_payment_id);\n        if (response.razorpay_payment_id) {\n          this.setState({ paymentid: response.razorpay_payment_id });\n          this.submitfom(response.razorpay_payment_id, this.state.regfees);\n        }\n      },\n      prefill: {\n        name: formdata.name,\n        email: formdata.email,\n        phone_number: formdata.phoneNo,\n      },\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.on(\"payment.failed\", function (response) {\n      alert(response.error.description);\n    });\n    paymentObject.open();\n  };\n//api call for  oder_id for payment \n  loadpaymentdata = async () => {\n    const formvalues = this.state.formData;\n    let data = commons.displayfileds(formvalues);\n\n    let timeStamp = data.email + \"_\" + Math.floor(Date.now());\n    let apiData = {};\n    apiData.amount = (parseInt(this.state.regfees) * 100).toString();\n      apiData.receipt = timeStamp;\n    await ApiCall(\"POST\", apiData, \"playreg\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (res) {\n          this.setState({ order_id: res.orderId });\n        }\n      })\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n\n//api call to server to store the transaction_id/form fileds\n  submitfom = async (id, amount) => {\n    const formvalues = this.state.formData;\n    let data = commons.displayfileds(formvalues);\n    let apiData = {};\n    apiData.type = \"playerreg\";\n    apiData.caller = \"caller\";\n    apiData.apiKey = \"apikey\";\n    apiData.userName = data.name;\n    apiData.verificationCode = data.otp;\n    apiData.emailAddress = data.email;\n    apiData.password = data.password;\n    apiData.clubNameId = data.clubNameId;\n    apiData.regOverride = true;\n    apiData.transactionID = id;\n      apiData.transactionAmount = amount;\n      apiData.approvalCode = \"TSA\";\n    apiData.role = \"Player\";\n    apiData.academy = \"none\";\n    apiData.associationId = \"\";\n    apiData.dob = data.DOB;\n    this.setState({ loading: true });\n    await ApiCall(\"POST\", apiData, \"core\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (res && res.data) {\n          if (res.data.status === \"failure\") {\n            this.setState({ pwdMessage: res.message, loading: false });\n            this.resetForm();\n          } else {\n            this.setState({\n              pwdStatus: true,\n              dialogOpen: true,\n              loading: false,\n            });\n            this.resetForm();\n          }\n        }\n      })\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n//function for form validation\n  verifyForm = async (e) => {\n    \n    e.preventDefault();\n    this.setState({ pwdMessage: \"\" });\n    let formData = this.state.formData;\n    let data = commons.displayfileds(formData);\n    formData = await formValidation.genricFromValidation(\n      formData,\n      this.state.otpcode\n    );\n \n    let result = formData.find((item) => {\n      if (item && item.error.length) return item;\n    });\n\n    this.setState({ formData: formData });\n\n    if (result === undefined) {\n      this.displayRazorpay(data);\n    }\n  };\n\n  //change handler for input fileds of form.\n  onChange = (e) => {\n    let formDataInput = [...this.state.formData];\n    this.setState({ otpMessage: \"\" });\n    formDataInput.find((item) => {\n      if (item.key === e.target.name) {\n        item.type === \"number\"\n          ? (item.value = parseInt(e.target.value))\n          : (item.value = e.target.value);\n\n        if (item.key === e.target.name && item.type !== \"string\")\n          item.value = e.target.value;\n        if (item.type === \"date\") {\n       \n          item.value = e.target.value;\n\n         \n        }\n\n        if (item.key === e.target.name && item.id === \"email\") {\n          item.value = e.target.value;\n          this.setState({ formData: formDataInput });\n          this.showotpval();\n        } else if (item.key === e.target.name && item.type === \"string\")\n          item.value = e.target.value;\n      }\n    });\n    this.setState({ formData: formDataInput });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n      formData,\n     \n      registredClubdu,\n      pwdStatus,\n     \n      pwdMessage,\n      dialogOpen,\n      loading,\n    } = this.state;\n\n    let role_groups = formValidation.chunkArray(2, formData);\n\n    console.log(formData);\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n\n        <div className={classes.root}>\n          <Paper className={classes.paper}>\n            <Grid\n              justify=\"center\"\n              alignItems=\"center\"\n              container\n              style={{\n                marginTop: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n              \n            >\n              <RefreshLoader display=\"overlay\" loading={loading} />\n            </Grid>\n\n            <Container maxWidth=\"sm\">\n              <Card style={{ margin: \"10px\" }}>\n                <CardHeader\n                  avatar={\n                    <Avatar\n                      aria-label=\"recipe\"\n                      style={{\n                        margin: 8,\n                        backgroundColor: \"red\",\n                      }}\n                    >\n                      R\n                    </Avatar>\n                  }\n                  title=\"Player Registration\"\n                />\n                <CardContent>\n                  <FormGenerator\n                    data={registredClubdu}\n                    groups={role_groups}\n                    groupBy={2}\n                    onChange={this.onChange}\n                  />\n                  {/* {formData.map((item, index) => {\n                                    const styleObj = {};\n                                    if (item.hidden) styleObj[\"display\"] = \"none\";\n\n                                    return (<TextField\n                                        key={index}\n                                        variant='outlined'\n                                        type={item.type}\n                                        disabled={item.disabled ? true : false}\n                                        hidden={item.hidden ? true : false}\n                                        label={item.hidden ? '' : item.displayName}\n                                        name={item.key}\n                                        fullWidth\n                                        margin=\"normal\"\n                                        value={item.value}\n                                        onChange={this.onChange}\n                                        error={item.error.length ? true : false}\n                                        helperText={item.error}\n                                        autoComplete=\"off\"\n                                        style={styleObj}\n                                    />)\n\n                                })} */}\n\n                  <Button\n                    onClick={this.verifyForm}\n                    style={{ marginTop: 10 }}\n                    fullWidth\n                  >\n                    Register\n                  </Button>\n\n                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                    {pwdStatus ? (\n                      <div>\n                        <span\n                          style={{ float: \"left\" }}\n                          className={classes.success}\n                        >\n                          {pwdMessage}\n                        </span>\n                        <Dialog\n                          open={dialogOpen}\n                          aria-labelledby=\"alert-dialog-title\"\n                          aria-describedby=\"alert-dialog-description\"\n                        >\n                          <DialogTitle id=\"alert-dialog-title\">\n                            Player Registation{\" \"}\n                          </DialogTitle>\n                          <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">\n                              Registation Completed.Please login\n                            </DialogContentText>\n                          </DialogContent>\n                          <DialogActions>\n                            <Button\n                              color=\"primary\"\n                              autoFocus\n                              onClick={this.handleDialog}\n                            >\n                              Ok\n                            </Button>\n                          </DialogActions>\n                        </Dialog>\n                      </div>\n                    ) : (\n                      <span style={{ float: \"left\" }} className={classes.error}>\n                        {pwdMessage}\n                      </span>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </Container>\n          </Paper>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default withRouter(withStyles(customStyles)(playerRegister));\n","D:\\my-app\\src\\responsiveComp\\ranking.js",[],"D:\\my-app\\src\\components\\login\\login.js",["508","509"],"import React from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { formFileds } from \"../../formdata\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport customStyles from \"../../styles/genricStyle\";\nimport Topbar from \"../../components/landingPage/TopBar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { sessioncommons } from \"../../commons\";\nimport { ApiCall } from \"../../APIService\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport formValidation from \"../../commons/formfunction\";\nimport SnackPopup from \"../../commons/genricComponents/snackbar\";\n\nimport { commons } from \"../../commons\";\nimport FieldIcon from \"../../commons/genricComponents/fieldIcon\";\n\nfunction cloneArray(arrayToClone) {\n  let clonedArray = arrayToClone.map((item) => ({ ...item }));\n  return clonedArray;\n}\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formdata: [],\n\n      loading: false,\n      requestStatus: \"\",\n      loginData: {},\n    };\n  }\n\n  componentDidMount() {\n    if (sessioncommons.getUser()) {\n      this.props.history.push({\n        pathname: \"/dashboard\",\n      });\n     \n    } else {\n      let data = cloneArray(formFileds);\n      this.setState({ formdata: data });\n    }\n  }\n//redirection to dashboad on success\n  handleSuccessfulAuth() {\n    this.props.history.push({\n      pathname: \"/dashboard\",\n    });\n  }\n//api call for login data\n  handleFormSubmit = async (e) => {\n    e.preventDefault();\n    const formvalues = [...this.state.formdata];\n    let formInputDataValid = await formValidation.genricFromValidation(formvalues);\n\n    let result = formInputDataValid.find((item) => {\n     \n      if (item.error.length) return item;\n    });\n\n    this.setState({ formdata: formInputDataValid });\n    if (result === undefined) {\n      const data = {};\n      const formvalues = [...this.state.formdata];\n      formvalues.map((obj) => {\n        return(\n        data[obj.id] = obj.value\n        \n        )\n      });\n\n      let apiData = {};\n      apiData.type = \"userLogin\";\n    \n      apiData.caller = \"caller\";\n       apiData.apiKey = \"apikey\";\n      apiData.userName = data.email;\n        apiData.userPassword = data.password;\n        apiData.emailOrPhoneFlag = 1;\n        apiData.loginRole = \"Player\";\n      apiData.paymentValid = \"yes\";\n\n      ApiCall(\"POST\", apiData, \"core\")\n        .then((response) => response.json())\n        .then((data) => {\n          if (typeof data === \"object\") {\n            this.setState({ loginData: data });\n            sessioncommons.setUserSession(data);\n            this.handleSuccessfulAuth();\n          } else if (typeof data === \"string\") {\n            this.setState({\n              requestStatus: data,\n            });\n          }\n        })\n        .catch((error) => {\n          commons.errorLog(error);\n        });\n    }\n  };\n//change handler for input fileds of form.\n  handleChange = (e) => {\n    const formvalues = [...this.state.formdata];\n\n    formvalues.find((el) => {\n      if (el && el.id === e.target.id) el.value = e.target.value;\n    });\n\n    this.setState({\n      formdata: formvalues,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { formdata, requestStatus} = this.state;\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Topbar index={3} />\n\n        <div className={classes.root}>\n          <Paper className={classes.paper}>\n            <Grid\n              justify=\"center\"\n              alignItems=\"center\"\n              container\n              style={{\n                marginTop: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n             \n            >\n              <Avatar\n                style={{\n                  margin: 8,\n                }}\n              >\n                <LockOutlinedIcon />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Login\n              </Typography>\n\n              <Grid\n                item\n                xs={12}\n                sm={8}\n                md={6}\n                className={classes.loginpaper}\n                component={Paper}\n                elevation={10}\n                square\n              >\n                <form noValidate className={classes.form} autoComplete=\"off\">\n                  {formdata.map((formval, index) => {\n                    return (\n                      <TextField\n                        key={index}\n                        variant=\"outlined\"\n                        autoFocus={formval.id ===\"email\" ? true : false}\n                        margin=\"normal\"\n                        required={formval.required ? formval.required : false}\n                        multiline={\n                          formval.multiline ? formval.multiline : false\n                        }\n                        error={formval.error ? true : false}\n                        helperText={formval.error}\n                        id={formval.id}\n                        rows={formval.rows ? formval.rows : \"\"}\n                        value={formval.value}\n                        fullWidth\n                        onChange={this.handleChange}\n                        label={formval.label}\n                        type={formval.type}\n                        InputLabelProps={{\n                          classes: {\n                            root: classes.label,\n                            focused: classes.cssFocused,\n                          },\n                        }}\n                        InputProps={{\n                          classes: {\n                            root: classes.cssOutlinedInput,\n                            focused: classes.cssFocused,\n                            notchedOutline: classes.notchedOutline,\n                            input: classes.input,\n                          },\n                          startAdornment: <FieldIcon name={formval.adorment} />,\n                        }}\n                      />\n                    );\n                  })}\n                  <Button\n                    onClick={this.handleFormSubmit}\n                    fullWidth\n                    type=\"submit\"\n                    className={classes.loginsubmit}\n                  >\n                    Submit\n                  </Button>\n\n                  <Grid container>\n                    <Grid item xs>\n                      <Link\n                        to={{\n                          pathname: \"/fogotPassword\",\n                        }}\n                        variant=\"body2\"\n                      >\n                        Forgot password?\n                      </Link>\n                    </Grid>\n\n                    <Grid item>\n                      <Link to={{ pathname: \"/registerSteps\" }} variant=\"body2\">\n                        {\"Don't have an account? Sign Up\"}\n                      </Link>\n                    </Grid>\n                  </Grid>\n\n                  {requestStatus.length ? (\n                    <SnackPopup message={requestStatus} type=\"error\" />\n                  ) : (\n                    \"\"\n                  )}\n                </form>\n              </Grid>\n            </Grid>\n          </Paper>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default withRouter(withStyles(customStyles)(Login));\n","D:\\my-app\\src\\responsiveComp\\regsteps.js",["510","511","512","513","514"],"import registerSteps from \"../components/login/registerSteps\"\nimport React, { useEffect } from 'react';\nimport { Desktop, Tablet, Mobile, Default } from \"../views\"\nimport ClubAssociation from \"../components/about/ClubAsscoc\"\nimport { aboutMenu } from \"../formdata\"\nimport Topbar from \"../components/landingPage/TopBar\"\n\nimport Mobileview from \"../components/MobileView/mobileView\"\nconst playerRegistration = (props) => {\n    const { classes } = props;\n\n    return (<div>\n        <Desktop>\n            <registerSteps classes={classes} />\n        </Desktop>\n        <Tablet>\n            <Topbar tab={true} />\n            <registerSteps orientation={true} />\n        </Tablet>\n        <Mobile>\n            <Topbar tab={true} />\n            <registerSteps orientation={true} />\n        </Mobile>\n\n    </div>)\n\n}\n\n\n\nexport default playerRegistration",["515","516"],"D:\\my-app\\src\\components\\login\\dashboardcomp\\dashboard.js",["517"],"import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Typography from \"@material-ui/core/Typography\";\nimport customStyles from \"../../../styles/genricStyle\"\nimport Topbar from \"../../landingPage/TopBar\";\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Logout from \"../../login/dashboardcomp/logout\"\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Grid from \"@material-ui/core/Grid\";\nimport { ApiCall } from \"../../../APIService\";\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport { commons } from \"../../../commons\";\nimport formValidation from \"../../../commons/formfunction\"\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport clsx from 'clsx';\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport List from '@material-ui/core/List';\nimport { fileCall } from \"../../../APIService\"\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {  withRouter } from \"react-router-dom\";\nimport IconButton from '@material-ui/core/IconButton';\nimport { dashboardData } from \"../../../formdata\" \nimport Container from '@material-ui/core/Container';\nimport Downloadpdf from \"../../tournaments/ViewsDraws/drawsDialouge\";\nimport {\n   \n   \n    Paper,\n   \n} from \"@material-ui/core\";\nimport SnackPopup from \"../../../commons/genricComponents/snackbar\"\nimport { sessioncommons } from \"../../../commons\"\nimport RefreshLoader from \"../../../commons/genricComponents/pageloader\"\nimport DescriptionIcon from '@material-ui/icons/Description';\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logout: false,\n            pdata: false,\n            value: 0,\n            name: \"\",\n            activeStep: 0,\n            uploadedFile: null,\n            error: {},\n            open: true,\n            \"message\": '',\n            playerDetails: [],\n            requestStatus: \"\",\n            uploadedstatus: {},\n            iduploaded: null,\n            loading: false,\n            notup: false,\n            uploaded: false,\n\n            tournamentId: this.props.match.params.id,\n            pdfopen: false,\n            prosvalue:\"Prospectus\",\n            download:false,\n            ViewPdf: \"\",\n            validPdf: false,\n        };\n    }\n\n\n    handleDrawerOpen = () => {\n        this.setState({ open: true })\n    };\n    handleDrawerClose = () => {\n        this.setState({ open: false })\n    };\n    logout = () => {\n        this.setState({ logout: !this.state.logout })\n    }\n\n    handleChange = (event, index) => {\n        \n       \n\n        let Found = dashboardData.find(item => item.value === index);\n        this.setState({\n            value: Found.value,\n         \n         \n        });\n    };\n    showComp = (index) => {\n\n\n        let Found = dashboardData.find(item => item.value === index);\n\n        if (Found) return <div><Found.component /></div>\n\n\n        return false;\n    };\n    downloaddraws = () => {\n        this.setState({\n            download: true,\n\n           \n        });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n      \n      \n        \n     \n        let fileVal = formValidation.validateFile(this.state.uploadedFile);\n        this.setState({ message: fileVal });\n        if (fileVal) {\n            if (!fileVal.status) {\n                this.setState({ \"message\": fileVal.msg })\n            }\n            else {\n                this.setState({ \"message\": fileVal.msg })\n                let loggeduser = sessioncommons.getUser()\n                let params = {};\n               \n                params.playerName = loggeduser.userName;\n                params.affiliationId = loggeduser.affiliationId;\n                params.playerEmail = loggeduser.emailAddress;\n                params.file = this.state.uploadedFile;\n\n                let fData = new FormData();\n\n                for (let key in params) {\n                    fData.append(key, params[key]);\n                }\n                this.setState({ loading: true });\n                fileCall(\"POST\", fData, \"playerupload\")\n                    .then((res) => res.json())\n                    .then(res => {\n                        if (res.recordAdded && res.message) {\n                          \n\n                            this.setState({\n                                loading: false,\n\n                                uploadedstatus: res.message\n                            })\n\n                           \n                           \n                        }\n\n                        \n                    })\n                    .then((res) => {\n                        setTimeout(() => {\n                            this.onReset();\n                        }, 1000);\n                    })\n\n              \n                    .catch((error)=>{\n                        this.setState({\n                            loading: false,\n                            iduploaded: false,\n                            message: \"Please try after some  time\",\n                        });\n\n                        console.log(\"upload error \" + error);\n                    });\n\n              \n            }\n        }\n    };\n\n\n    onChange = (e) => {\n        this.setState({\n            uploadedFile: e.target.files[0],\n           \n        });\n    };\n\n//reset file data\n    onReset() {\n        this.refs.file.value = \"\";\n        this.setState({\n            uploaded: true,\n            notup: false\n        });\n    }\n//check if player uploded the doc\n    checkidverification = () => {\n    \n        let loggeduser = sessioncommons.getUser()\n        let playerdata = sessioncommons.getplayerDetails()\n\n        if (loggeduser && playerdata) {\n            let affiliationId = loggeduser.affiliationId;\n            let userId = playerdata.find(\n                (obj) => affiliationId === obj[\"player_affliation_id\"]\n            );\n\n            if (userId) {\n                this.setState(\n                    {\n                       \n                        notup: true,\n                    },\n                 \n                );\n            } else {\n                this.setState(\n                    {\n\n                        \n                        uploaded:true,\n                    },\n                 \n                );\n            }\n        }\n\n\n\n\n\n    };\n    \n\n   \n    handleClose = () => {\n        this.setState({\n\n            pdfopen: false,\n        });\n    };\n\n\n\n\n    componentDidMount() {\n       \n        this.setState({ pdfopen: false });\n        let data = \"http://karnatakatt.com/pdf/fp-prospectus.pdf\"\n       \n\n        this.setState({\n            loading: false,\n            ViewPdf: data,\n            pdfopen: true,\n            validPdf: true,\n        });\n     \n        {\n            let apiData = {};\n            apiData.tableName = \"playerdetails\";\n           \n            apiData.type = \"getData\"\n            this.setState({ pdata:true, loading: true });\n            ApiCall(\"POST\", apiData, \"getData\")\n\n                .then(res => res.json())\n                .then((res) => {\n                    if (res && res.status === \"success\" && res.getData) {\n\n                        this.setState({\n                            loading: false,\n                            pdata: false,\n                            playerDetails: res[\"getData\"],\n\n                        });\n\n                    }\n\n                  \n\n                    sessioncommons.setplayerSession(res[\"getData\"])\n                 \n\n                }).then((res) => {\n                 \n                 \n                   \n                        this.checkidverification();\n                  \n\n                })\n                \n                \n                \n                .catch(error => {\n                    commons.errorLog(error)\n                });\n\n        }\n\n\n\n    }\n\n    render() {\n        const { classes } = this.props;\n        const {  download ,pdata, uploadedstatus, notup, uploaded, message, open, loading, value,\n              pdfopen,\n            validPdf,\n            ViewPdf,\n            prosvalue,\n           } = this.state\n      \n      \n       \n        const tname = sessioncommons.getTournament()\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <Topbar index={3} />\n                <div className={classes.rootDashboard}>\n                 \n                    <Drawer\n                        variant=\"permanent\"\n                        classes={{\n                            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                        }}\n                        open={open}\n                    >\n                        <div className={classes.toolbarIcon}>\n                            {!open ? (<IconButton\n                                edge=\"start\"\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={this.handleDrawerOpen}\n                                className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                            >\n                                <MenuIcon/>\n                            </IconButton>) : <IconButton onClick={this.handleDrawerClose}>\n                                    <ChevronLeftIcon />\n                                </IconButton>}\n                          \n                           \n                        </div>\n                        <Divider/>\n                        <List> {dashboardData.map((nestedItem, index) => {\n                            return (\n                                <ListItem\n                                    className={classes.ListItemu}\n                                    key={index}\n                                    selected={value === index}\n                                    button\n                                    onClick={(e) =>\n                                        this.handleChange(e, index)\n                                    }\n                                \n                                  \n                                   \n                                >\n                                    <ListItemIcon>{nestedItem.icon ? nestedItem.icon : ''}</ListItemIcon>\n                                    <ListItemText primary={nestedItem.label} />\n                                </ListItem>\n                                \n                            );\n                        })}</List>\n                        <Divider />\n                    \n                    </Drawer>\n                    <main className={classes.content}>\n                        <div className={classes.appBarSpacer}>\n                            <Grid container style={{ marginBottom: 15 }}>\n                                <Grid style={{ flex: 1 }} >\n                                    <Typography gutterBottom variant=\"h4\" component=\"span\">\n                                        KTTA\n                                            </Typography>\n                                </Grid>\n                              \n                                <Grid>\n\n                                    <Button onClick={this.downloaddraws}\n                                        style={{ marginRight: 30 }}\n                                        startIcon={<DescriptionIcon/>}\n                                >\n                                    Prospectus\n                                            </Button>\n\n                                </Grid>\n\n                                <Grid>\n                                    <Button onClick={this.logout}\n                                        startIcon={<ExitToAppIcon />}\n                                    >\n                                        Logout\n                                            </Button>\n                                    {this.state.logout &&\n                                        <Logout />\n                                    }\n\n\n\n                                </Grid>\n\n\n                               \n\n\n                            </Grid>\n                            </div>\n                        <Divider />\n                        <Container maxWidth=\"md\" >\n                            <Grid\n                                \n                                alignItems=\"center\"\n                                justify=\"center\"\n                                container\n                               \n                            >\n                                <Grid item xs={12} md={12}>\n                                 \n                                    <Paper className={classes.contentpaper}>\n\n                                           \n                                            {pdata &&\n                                                <Grid align=\"center\" justify=\"center\" container >\n                                                    <Grid>\n                                                        <RefreshLoader display=\"normal\" loading={loading} />\n                                                    </Grid>\n                                                </Grid>}\n\n                                            <Grid  container>\n                                                {uploaded &&\n                                                    \n                                                      \n\n                                                      \n                                                            <Grid container align=\"center\">\n                                                               \n                                                                   \n                                                                    <Grid item md={12} sm={10} xs={11}>\n\n                                                                        <Typography gutterBottom variant=\"h4\">\n                                                                            {tname.tournamentName}\n                                                                        </Typography>\n                                                                    </Grid>\n\n                                                                \n\n                                                                <Grid item md={12}>\n                                                                    {this.showComp(value)}\n                                                                </Grid>\n                                                            </Grid>\n\n\n\n                                                        \n\n                                                   \n\n\n\n                                                }\n\n                                                {notup ?\n                                                    (<Card className={classes.card} style={{ margin: '10px' }}>\n                                                        <CardHeader\n                                                            title=\"DOB proof for verification\"\n                                                        />\n                                                        <CardContent>\n\n\n                                                            <RefreshLoader display=\"normal\" loading={loading} />\n\n                                                            <Grid item md={12} sm={12} xs={12}>\n\n                                                                <input\n                                                                    accept=\"image/*\"\n                                                                    ref=\"file\"\n                                                                    id=\"contained-button-file\"\n                                                                    type=\"file\"\n                                                                    onChange={this.onChange}\n                                                                />\n\n                                                                <label htmlFor=\"contained-button-file\">\n                                                                    <Button\n                                                                        size=\"small\"\n                                                                        startIcon={<ArrowUpwardIcon />}\n                                                                        component=\"span\"\n                                                                        onClick={this.onSubmit}\n                                                                    >\n                                                                        Upload\n                    </Button>\n                                                                </label>\n\n                                                                <Typography variant=\"body1\" color=\"error\">\n                                                                    {\" \"}\n                                                                    {message.length ? message : \"\"}\n                                                                </Typography>\n                                                                {uploadedstatus.length ? (\n                                                                    <SnackPopup\n                                                                        message={uploadedstatus}\n                                                                        type=\"success\"\n                                                                    />\n                                                                ) : (\n                                                                        \"\"\n                                                                    )}\n                                                            </Grid>\n\n                                                        </CardContent>\n\n\n\n                                                    </Card>\n                                                    ) : \"\"}\n                                            </Grid>\n                                        </Paper>\n\n                                    {download ? <Downloadpdf\n                                        open={pdfopen}\n                                        view={validPdf}\n                                        ViewPdf={ViewPdf}\n                                        tounamentgroup={prosvalue}\n                                        onClose={this.handleClose}\n                                        test={true}\n                                    /> : \"\"}\n\n\n\n\n\n                                    \n\n\n\n\n\n\n\n\n\n                                </Grid>\n\n                            </Grid>\n                        \n                        </Container>\n                           \n                     \n                    </main>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default withRouter(withStyles(customStyles)(Dashboard));\n","D:\\my-app\\src\\responsiveComp\\viewsDraws.js",[],"D:\\my-app\\src\\responsiveComp\\playerList.js",[],"D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\showdraws.js",["518","519"],"import React from \"react\";\n\nimport Container from '@material-ui/core/Container';\nimport customStyles from \"../../../../styles/genricStyle\";\nimport Divider from '@material-ui/core/Divider';\nimport Titlize from \"../../../../commons/genricComponents/titlize\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\n\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { commons } from \"../../../../commons\";\nimport Fontawsome from \"../../../../commons/genricComponents/fontAwsomicon\"\nimport { uiCommons } from \"../../../../commons\";\n\n//import { drawresults, mresults, } from \"../../../../formdata\"\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from '@material-ui/core/Box';\nimport { sessioncommons } from \"../../../../commons\"\nconst gridColumns = 3;\n\n\nclass showdraws extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: false,\n      value: \"round1\",\n      drawinfo: this.props.match.params.id,\n      //drawdata: mresults,\n      rowdata: sessioncommons.getdrawData().roundDetails,\n      rowmatchdata: sessioncommons.getdrawData().roundMatchDetails,\n      drawmatchRecords: sessioncommons.getdrawData().matchRecords,\n      matchresults: [],\n      datainitil: []\n    }\n\n  }\n//filling the dots based dot value\n  getDots = (x) => {\n    let icon = <Fontawsome\n      name=\"circle\"\n      size=\"2x\"\n      style={{ width: \"0.3em\", padding: \"1px\" }} />\n    return Array(x).fill(icon)\n\n\n  }\n  //fill the values with \"-\" if both scores are 0 in both sets in matchRecords data\n  getg = (val) => {\n\n    return Array(val).fill(\"-\")\n\n  }\n //reduce function to group the rows based on roundMatchDetails\n  groupBy = (array, key) => {\n    return array.reduce((result, currentValue) => {\n      // If an array already present for key, push it to the array. Else create an array and push the object\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(\n        currentValue\n      );\n      // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\n      return result;\n    }, {});\n\n  };\n\n \n//reducer function to  to get indivisual ow details\n  showdatval = (xs, key) => {\n    return xs.reduce((rv, x) => {\n      rv[\"round\" + x.col] = this.getDots(x.dots);\n      rv.row = x.row;\n      rv.matchNo = x.matchNo\n      rv.round = x.round\n      return rv;\n    }, {});\n  };\n\n\n\n \n\n\n\n\n\n\n  componentDidMount() {\n\n    let update = [...this.state.drawmatchRecords]\n\n\n    const clubData = commons.gridData(this.state.rowdata)\n    this.setState({\n      datainitil: clubData\n    })\n\n    update.forEach(el => {\n//function to replace the player name () with empty value on component load\n      Object.keys(el.players).forEach((key) => {\n        const val = el.players[key];\n        if (val === \"()\") {\n          el.players[key] = \"\"\n        }\n      });\n\n\n\n    })\n\n \n\n//check if arrays contins same values\n    const containsAll = (a1, a2) => {\n      return a1.every(arr2Item => a2.includes(arr2Item))\n    }\n\n\n    update.map(el => {\n      let a1 = el.scores.setScoresA\n      let a2 = el.scores.setScoresB\n      let y = containsAll(a1, a2)\n      if (y) {\n        Object.keys(el.scores).map((key) => {\n          el.scores[key] = this.getg(el.scores[key].length)\n\n        });\n      }\n\n\n    })\n\n\n\n\n\n    this.setState({\n      drawmatchRecords: update\n    })\n\n  }\n\n//click handler to change the data based on rounds\n  handleClick = (r,index) => {\n   \n  \n    let allResult = [];\n    let filterdata = [];\n    for (let index = r.roundNumber; index < r.roundNumber + 3; index++) {\n      let result = this.state.drawmatchRecords.filter(\n        (word) => word.roundNumber === index\n      );\n      let xresult = this.state.rowdata.filter(\n        (x) => x.roundNumber === index\n      );\n      allResult = [...allResult, ...result];\n      filterdata = [...filterdata, ...xresult];\n    }\n\n\n\n \n\nthis.setState({\n      matchresults: allResult,\n      datainitil: filterdata,\n  selected:index\n    });\n  }\n//displaying function to display  draw details based on roundNumber\n  showdata = (outerElement) => {\n\n    let result = this.state.drawmatchRecords.filter(word => word.roundNumber === outerElement.roundNumber);\n    return result\n  }\n\n//displaying winner from matchRecords data\n  displayWinner = (winner, players) => {\n\n    if (winner.length) {\n      var found = Object.values(players).find((key) => {\n        return key === winner;\n      });\n    }\n    return found\n  }\n\n\n  // handleClick=(x)=>{\n  //     alert(JSON.stringify(x))\n  // }\n\n\n  render() {\n    const { classes,  } = this.props;\n    let gridColumnData = uiCommons.getGrid(gridColumns);\n    const {  drawinfo, datainitil, rowdata,  selected, rowmatchdata} = this.state;\n    const detailsGroupedByRow = this.groupBy(rowmatchdata, 'row');\n    const ELEMENT_DATA = Object.values(detailsGroupedByRow).map(rowItem => {\n      return this.showdatval(rowItem, \"row\");\n    });\n\n  \n    return (\n      <React.Fragment>\n        <CssBaseline />\n\n        <div className={classes.root}>\n          <AppBar style={{ backgroundColor:\"#e50606e3\"}} position=\"static\">\n            <Toolbar variant=\"dense\">\n              <Typography variant=\"h6\" color=\"inherit\">\n                {drawinfo}\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <Container maxWidth=\"lg\">\n            <Table\n             \n              style={{ flex: 1 }}\n              size=\"small\"\n              aria-label=\"a dense table\"\n           \n            >\n             \n              <TableHead  >\n                <TableRow >\n                  {rowdata.map((outerElement,index) => {\n\n                    return (\n                    \n                        <TableCell\n                          align=\"center\"\n                          style={{cursor:\"pointer\"}}\n                          onClick={() => this.handleClick(outerElement, index)}\n                      >\n                        <Box borderColor={selected === index ? \"#1f4287\" : \"\"}  border={selected === index ? 2 : \"\"}>{outerElement.roundName}</Box>\n                       \n                        </TableCell>\n                      \n                     \n                     \n                    );\n                  })}\n                    </TableRow>\n                  </TableHead>\n               \n              <TableBody>\n                {ELEMENT_DATA.map((row, index) => (\n                  <TableRow key={index}>\n                    <TableCell\n                      classes={{ root: classes.drawtable }}\n                      align=\"center\"\n                      component=\"th\"\n                      scope=\"row\"\n                    >\n                      {row.round1}\n                    </TableCell>\n                    <TableCell\n                      classes={{ root: classes.drawtable }}\n                      align=\"center\"\n                      component=\"th\"\n                      scope=\"row\"\n                    >\n                      {row.round2}\n                    </TableCell>\n\n                    <TableCell\n                      classes={{ root: classes.drawtable }}\n                      align=\"center\"\n                      component=\"th\"\n                      scope=\"row\"\n                    >\n                      {row.round3}\n                    </TableCell>\n                    <TableCell\n                      classes={{ root: classes.drawtable }}\n                      align=\"center\"\n                      component=\"th\"\n                      scope=\"row\"\n                    >\n                      {row.round4}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Container>\n\n          <Grid container   align=\"center\">\n            {datainitil.map((outerElement) => {\n              let displayDraws = this.showdata(outerElement);\n\n              return (\n                <Grid\n                  item\n                  sm={12}\n                  md={gridColumnData.md}\n                  xs={12}\n                >\n                  <Grid container >\n                    <Grid item md={12} sm={8} xs={8}>\n                      <Typography>\n                        <span style={{ borderBottom: \"3px solid #32407b\" }}>\n                          {outerElement.roundName}\n                        </span>\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                  <Grid container className={classes.drawsContainer}>\n                    <Grid\n                      item\n                      md={12}\n                      sm={8}\n                      xs={8}\n                      className={classes.drawsChildren}\n                    >\n                      {displayDraws.map((x) => {\n                        let showWinner = this.displayWinner(\n                          x.winner,\n                          x.players\n                        );\n\n                        return (\n                          <Paper\n                            style={{\n                              padding: 20,\n                              margin: 10,\n                            }}\n                          >\n                            <Grid container >\n                              <Grid container ></Grid>\n                              <Grid xs={1} sm={1} md={1}>{x.matchNumber}</Grid>\n                              \n                                {showWinner === x.players.playerA ? (\n                                  <React.Fragment>\n                                    <Grid\n                                      className={classes.winner}\n                                      xs={1} sm={1} md={1}\n                                    >\n                                      <Fontawsome\n                                        name=\"winner\"\n                                        size=\"md\"\n                                        style={{\n                                          width: \"2em\",\n                                          color: \"#00000\",\n                                        }}\n                                      />\n                                  </Grid>\n                                  \n                                    <Grid xs={3} sm={3} md={4} style={{\n                                      whiteSpace: \"nowrap\",\n\n                                      overflow: \"hidden\",\n                                      textOverflow: \"ellipsis\",\n\n                                    }}>\n                                      \n                                        <Titlize value={showWinner} />\n                                      \n                                    </Grid>\n\n\n\n                                  </React.Fragment>\n                                ) : (\n                                    <Grid xs={3} sm={3} md={4} style={{\n                                      whiteSpace: \"nowrap\",\n\n                                      overflow: \"hidden\",\n                                      textOverflow: \"ellipsis\",\n\n                                    }}>\n                                     \n                                        <Titlize value={x.players.playerA} />\n                                      \n\n                                    </Grid>\n                                  )}\n                              \n                            \n                                 \n                                \n                            \n\n                              <Grid xs={7} sm={7} md={6} >\n                                <Grid container>\n                                  {x.scores.setScoresA.map((scoreA, i) => {\n                                    const eq =\n                                      parseInt(scoreA) >\n                                      parseInt(x.scores.setScoresB[i]);\n\n                                    return (\n                                      <Grid\n                                        className={\n                                          eq\n                                            ? classes.highlightscore\n                                            : classes.spacing\n                                        }\n                                        xs={1} sm={1}   md={1}\n                                      >\n                                        {scoreA}\n                                      </Grid>\n                                    );\n                                  })}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n\n                            \n                            <Divider />\n                            <Grid container >\n\n                              <Grid xs={1} sm={1} md={1}></Grid>\n                              {showWinner === x.players.playerB ? (\n                                <React.Fragment>\n                                  <Grid\n                                    className={classes.winner}\n                                    xs={1} sm={1} md={1}\n                                  >\n                                    <Fontawsome\n                                      name=\"winner\"\n                                      size=\"md\"\n                                      style={{\n                                        width: \"2em\",\n                                        color: \"#00000\",\n                                      }}\n                                    />\n                                  </Grid>\n                                  <Grid xs={3} sm={3} md={4} style={{\n                                    whiteSpace: \"nowrap\",\n\n                                    overflow: \"hidden\",\n                                    textOverflow: \"ellipsis\",\n                                  \n                                  }}>\n                                   \n                                      <Titlize value={showWinner} />\n                                   \n                                  </Grid>\n\n\n\n                                </React.Fragment>\n                              ) : (\n                                  <Grid xs={3} sm={3} md={4} style={{\n                                    whiteSpace: \"nowrap\",\n\n                                    overflow: \"hidden\",\n                                    textOverflow: \"ellipsis\",\n                                \n                                  }}>\n                                   \n                                      <Titlize value={x.players.playerB} />\n\n\n                                  </Grid>\n                                )}\n\n\n\n                              <Grid xs={7} sm={7} md={6} >\n                                <Grid container>\n                                  {x.scores.setScoresB.map((scoreB, i) => {\n                                    const eq =\n                                      parseInt(scoreB) >\n                                      parseInt(x.scores.setScoresA[i]);\n\n                                    return (\n                                      <Grid\n                                        className={\n                                          eq\n                                            ? classes.highlightscore\n                                            : classes.spacing\n                                        }\n                                        xs={1} sm={1} md={1}\n                                      >\n                                        {scoreB}\n                                      </Grid>\n                                    );\n                                  })}\n                                </Grid>\n                              </Grid>\n                            </Grid>\n\n                          </Paper>\n                        );\n                      })}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n}\nexport default withStyles(customStyles)(showdraws);","D:\\my-app\\src\\components\\contact\\contact.js",["520","521","522"],"import React from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport SnackPopup from \"../../commons/genricComponents/snackbar\"\n\nimport fields from \"../../formdata/formvalues\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Topbar from \"../landingPage/TopBar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport MapContainer from \"../typo/map\";\nimport formValidation from \"../../commons/formfunction\";\nimport Container from '@material-ui/core/Container';\nimport FieldIcon from \"../../commons/genricComponents/fieldIcon\"\nimport { ApiCall } from \"../../APIService\";\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formdata: [], \n      reqmsg: false, \n      requestStatus: \"\",\n      asscoc: this.props.location.state\n    };\n  }\n\n  componentDidMount() {\n    let data = [...JSON.parse(JSON.stringify(fields))];\n    this.setState({ formdata: data });\n  }\n//form reset\n  resetForm = () => {\n    let data = [...JSON.parse(JSON.stringify(fields))];\n    this.setState({ formdata:data });\n  };\n\n  handleChange = e => {\n\n    const formvalues = [...this.state.formdata];\n          formvalues.find(el => {\n      if ( el && el.id === e.target.id) el.value = e.target.value;\n    });\n\n\n    this.setState({ formdata: formvalues });\n  };\n//api call for form submit\n  handleFormSubmit = async (e) => {\n    const formvalues = [...this.state.formdata];\n \n    let formInputDataValid =  await formValidation.genricFromValidation(formvalues);\n  \n    let result = formInputDataValid.find((item) => {\n      \n      if (item.error.length) return item;\n    })\n   this.setState({ formdata: formInputDataValid });\n    if (result === undefined) {\n      const data = {};\n      const formvalues = [...this.state.formdata];\n      formvalues.map((obj) => {\n        data[obj.id] = obj.value;\n      });\n      var params = {};\n\n     \n        params.emailId =data.email;\n        params.subject = data.subject;\n      params.description = data.Messege;\n\n      \n\n      ApiCall(\"POST\", params, \"contactus\")\n        .then(response => response.json())\n        .then(data => {\n       \n          if (data.mailStatus) {\n\n            this.setState({\n            \n              reqmsg: true,\n              requestStatus: data.mailStatus\n            });\n\n            this.resetForm();\n          }\n\n          else\n          {\n            this.setState({\n              reqmsg: false,\n              requestStatus: \"Error occured.Please try after sometime!!!\"\n            });\n            \n            }\n        })\n\n        .catch(error => {\n          \n          console.error(error);\n          this.setState({\n            reqmsg: false,\n            requestStatus: \"Error occured.Please try after sometime!!!\"\n          });\n\n          this.resetForm();\n        });\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { formdata, requestStatus } = this.state;\n    \n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Topbar index={4}  />\n\n        <div className={classes.root}>\n          <Container maxWidth=\"lg\">\n     \n            <Paper className={classes.paper}>\n\n           \n                  <MapContainer />\n               \n               \n          \n             \n            \n                \n           \n             \n  \n                <Paper className={classes.formclass}>\n                  <Grid\n                   \n                  \n                    \n                    container\n                    \n                 \n                 >\n                <Grid item md={6}>\n                  <form noValidate autoComplete=\"off\">\n                    {formdata.map((formval, index) => {\n                      return (\n                        <TextField\n                          key={index}\n                          style={{ margin: 10 }}\n                          variant=\"outlined\"\n                          fullWidth\n                          required={\n                            formval.required ? formval.required:false\n                           \n                          }\n                          multiline={\n                            formval.multiline ? formval.multiline : false\n                          }\n                          error={formval.error ? true : false}\n                          helperText={formval.error}\n                          id={formval.id}\n                          rows={formval.rows ? formval.rows : \"\"}\n                          value={formval.value}\n\n                          onChange={this.handleChange}\n                          label={formval.label}\n                          type={formval.type}\n                          InputLabelProps={{\n                         \n                            classes: {\n                              root: classes.label,\n                              focused: classes.cssFocused\n                            }\n                          }}\n                          InputProps={{\n                            classes: {\n                              root: classes.cssOutlinedInput,\n                              focused: classes.cssFocused,\n                              notchedOutline: classes.notchedOutline,\n                              input: classes.input\n                            },\n                              startAdornment: (\n                                <FieldIcon name={formval.adorment} size=\"\" style={{}} type=\"mat\"/>\n                              )\n                          }}\n                        />\n                      );\n                    })}\n                      {(requestStatus.length) ? (<SnackPopup message={`${requestStatus} Response Recorded!!!!`} type=\"success\" />) : \"\"}\n\n                   \n                 \n                  </form>\n                    </Grid>\n                  </Grid>\n                     <Button\n                      onClick={this.handleFormSubmit}\n                   \n                      type=\"submit\"\n                      className={classes.actionButton}\n                    >\n                      Submit\n                      </Button>\n              </Paper>\n\n            </Paper>\n       \n          \n            </Container>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default (Contact);\n","D:\\my-app\\src\\commons\\uiCommons.js",[],"D:\\my-app\\src\\commons\\userfunc.js",["523"],"import moment from \"moment\";\n\nconst commons = {}\n//genic api error\ncommons.errorLog = (e) => {\n    console.log(e)\n}\n//filter date past/present/future in tounament file\ncommons.checkDate = (input1, input2,input3) => {\n    \n    let curDate = new Date();\n    let startDate = new Date(input1);\n    let endDate = new Date(input2);\n    let endsub = new Date(input3);\n    if (moment(curDate).isBetween(startDate, endDate)) return \"current\";\n    if (moment(curDate).isAfter(moment(endDate))) return \"past\";\n    if (moment(curDate).isAfter(moment(endsub)))\n        return \"closed\"\n     if (moment(curDate).isBefore(startDate))\n        return \"future\"\n    \n}\n\n//genric function for payment script\ncommons.loadScript = (src) => {\n    return new Promise((resolve) => {\n      const script = document.createElement(\"script\");\n      script.src = src;\n      script.onload = () => {\n        resolve(true);\n      };\n      script.onerror = () => {\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  };\n\n\n//genric function to filter form fileds to send as params to api\ncommons.displayfileds = (formvalues) => {\n    const data = {};\n  \n    formvalues.forEach((obj) => {\n\n        if (obj.id === \"DOB\")\n            data[obj.id] = moment(obj.value).format('DD MMM YYYY');\n        else {\n            data[obj.id] = obj.value\n        }\n\n    });\n    return data\n}\n\n//format date used in tournament.js file\ncommons.formatDate = (inputDate) => {\n    inputDate = inputDate.split(\" \");\n    inputDate = inputDate[2] + \" \" + inputDate[1] + \" \" + inputDate[0];\n    return inputDate;\n}\n//  data for news/clubs/association landing page based on gridrows\ncommons.genricGrid = (apidata, gridrows, gridColumns)=>{\n\n    const x = commons.shuffleArray(apidata)\n\n    let genricData= [];\n    let i;\n    for (i = 0; i < gridrows; i++) {\n        genricData.push({ \"row\": i, \"colums\": x.slice((i * gridColumns), (i + 1) * gridColumns) })\n    }\n\n    return genricData\n}\n//data array that needs to displayed in draws compone \ncommons.gridData= (apidata) => {\n\n  \n\n    let genricData = [];\n    let i;\n    for (i = 0; i < (apidata.length-1); i++) {\n        genricData.push(apidata[i])\n    }\n\n    return genricData\n}\n\n//format the date used in tournament file\ncommons.formatterDate = (inputDate) => {\n    inputDate = inputDate.substring(0, 10).split(/\\D/g)\n    inputDate = inputDate[2] + \"-\" + inputDate[1] + \"-\" + inputDate[0]\n    return inputDate\n}\n//abbrevtion used in registered clubs and registered association \ncommons.abrrevatedData = (val) => {\n    const data = val.substring(0, 4)\n    return data.toUpperCase()\n}\n//check shuffle array function fo displying random data each time load\ncommons.shuffleArray = (array) => {\n    for (let i = array.length - 1; i >0; i--)\n    {\n       const j = Math.floor(Math.random() * (i + 1));\n       [array[i], array[j]] = [array[j],array[i]];\n     }\n     return array;\n}\n//check futuredate\ncommons.checkFuturedate = (date) => {\n    var today = new Date().getTime(),\n        idate = date.split(\"-\");\n\n    idate = new Date(idate[0], idate[1] - 1, idate[2]).getTime();\n    const datecheck = (today - idate) < 0\n    return datecheck\n      \n\n\n}\n//array sort in home page for registred clubs/association on abrrevation data\ncommons.sortArray = (array, type) => {\n\n  return array.sort((a, b) => {\n      if (type === \"acadamy\") {\n         \n          if (a.abbrevationAcademy < b.abbrevationAcademy) return -1;\n          if (a.abbrevationAcademy > b.abbrevationAcademy) return 1;\n          return 0;\n        //   if (a.clubName < b.clubName) return -1;\n        //   if (a.clubName > b.clubName) return 1;\n        //   return 0;\n      }\n      else if (type === \"assoc\") {\n          if (a.abbrevationAssociation < b.abbrevationAssociation) return -1;\n          if (a.abbrevationAssociation > b.abbrevationAssociation) return 1;\n          return 0;\n\n          \n         \n      }\n  })\n};\n\nexport default commons;\n","D:\\my-app\\src\\commons\\userAuth.js",[],"D:\\my-app\\src\\AUTHSevice.js",[],"D:\\my-app\\src\\components\\tournaments\\prolegue.js",[],"D:\\my-app\\src\\APIService.js",[],"D:\\my-app\\src\\formdata\\formvalues.js",[],"D:\\my-app\\src\\components\\landingPage\\home.js",[],"D:\\my-app\\src\\components\\landingPage\\TopBar.js",["524","525"],"import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Typography, Switch, Box} from \"@material-ui/core\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport { menuData } from \"../../formdata\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport { ApiCall } from \"../../APIService\";\nimport { API_URL } from \"../../globalUrls\";\nimport { commons } from \"../../commons\";\n// color:#d90404\nimport customStyles from \"../../styles/genricStyle\";\nimport {\n  List,\n  AppBar,\n  Toolbar,\n  Paper,\n  Tabs,\n  Tab,\n  Popper,\n  MenuList,\n  MenuItem,\n \n} from \"@material-ui/core\";\n\nimport pageBanner from \"../../config/bannerConfig\";\n//import Theme from \"./styles/customTheme.js\";\n\nclass Topbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darkState: true,\n      logopath: [],\n      nestedclick: null,\n      selected: null,\n      filepath: \"\",\n      value: this.props.index ? this.props.index : 0,\n      menuDrawer: false,\n      menuList: [],\n      open: false,\n      anchorEl: null,\n      currentLabel: \"HOME\",\n    };\n  }\n \n  loadMediaData = () => {\n    let apiData = {};\n    apiData.tableName = \"aboutus\";\n    //apiData.client_key = \"ktta\";\n    apiData.type = \"getData\";\n\n    ApiCall(\"POST\", apiData, \"getData\")\n      .then((res) => res.json())\n      .then((res) => {\n        this.setState({\n          logopath: res[\"getData\"],\n          filepath: res[\"imagePath\"],\n        });\n      })\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n  componentDidMount = () => {\n    this.loadMediaData();\n  };\n\n  handleDrawerClick1 = (event, item, index) => {\n   \n    //const { nestedclick } = this.state;\n    this.setState({\n      nestedclick: index,\n    });\n  };\n\n  handleDrawerClick = (event, item, index) => {\n    const { open } = this.state;\n    this.setState({\n      open: !open,\n    });\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value: value });\n  };\n  //function of tab click\n  handleMenuClick = (e, item) => {\n    console.log(\"new file\");\n    // if (e.target.textContent === \"PLAYERS\")\n    // og('label name', e.target.textContent)\n    this.setState({\n      currentLabel: item.label,\n    });\n  };\n\n  //function on hover\n  handleMenuOpen = (event, item) => {\n    const { currentTarget } = event;\n    let curMenuList = [];\n    if (item.choices && item.choices.length) {\n      curMenuList = item.choices;\n    }\n\n    this.setState({\n      open: true,\n\n      anchorEl: currentTarget,\n      //value: item.value,\n\n      menuList: curMenuList,\n    });\n  };\n\n  handleMenuClose = () => {\n    const currentLabel = this.state.value;\n    //const val = menuData.filter(item => `#${item.pathname}` === location || item.choices?.filter(choice => `#${choice.pathname}` === location))[0].value\n    const val = menuData.find((item) => item.value === currentLabel).value;\n\n    this.setState({\n      open: false,\n      anchorEl: null,\n      value: val,\n    });\n  };\n  handleThemeChange = (x) => {\n    let checked = x.target.checked\n    this.setState((prevState) => ({\n      darkState: !prevState.darkState,\n    }));\n   \n\n    this.props.tokenChange(checked ? \"dark\" : \"light\");\n    checked \n      ? localStorage.setItem(\"theme\", \"dark\")\n      : localStorage.setItem(\"theme\", \"light\");\n  };\n\n\n\n\n  handleClick1 = (event, index) => {\n    //const { nestedclick } = this.state;\n   \n    \n    this.setState({ nestedclick: index });\n  \n  };\n \n\n  handleInputSearch = () => {};\n\n  mobileMenuOpen = (event) => {\n    this.setState({ menuDrawer: true });\n  };\n\n  mobileMenuClose = (event) => {\n    this.setState({ menuDrawer: false });\n  };\n\n  renderMenu = () => {\n    const {\n     \n      open,\n      nestedclick,\n     \n      value,\n    \n    } = this.state;\n    return menuData && menuData.length ? (\n      <List>\n        {menuData.map((item, index1) => {\n          if (item.choices && item.choices.length) {\n            return (\n              <div key={index1}>\n                <ListItem\n                  button\n                  onClick={(e) => this.handleDrawerClick(e, item, index1)}\n                >\n                  <ListItemIcon>{item.icon ? item.icon : \"\"}</ListItemIcon>\n                  <ListItemText primary={item.label} />\n                  {open ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                  <List component=\"div\" disablePadding>\n                    {item.choices.map((nestedItem, index) => {\n                      console.log(\"state\", nestedclick);\n                      return (\n                        <ListItem\n                          key={index}\n                          button\n                          onClick={(e) =>\n                            this.handleDrawerClick1(e, item, index1)\n                          }\n                          selected={nestedclick === index}\n                          //className={classes.nested}\n                          component={Link}\n                          to={{\n                            pathname: nestedItem.pathname,\n                            search: this.props.location.search,\n                          }}\n                        >\n                          <ListItemIcon>\n                            {nestedItem.icon ? nestedItem.icon : \"\"}\n                          </ListItemIcon>\n                          <ListItemText primary={nestedItem.name} />\n                        </ListItem>\n                      );\n                    })}\n                  </List>\n                </Collapse>\n              </div>\n            );\n          } else {\n            return (\n              <ListItem\n                selected={value === index1}\n                component={Link}\n                to={{\n                  pathname: item.pathname,\n                  search: this.props.location.search,\n                  hash: item.hash ? item.hash : \"\",\n                }}\n                button\n                key={item.label}\n              >\n                <ListItemIcon>{item.icon ? item.icon : \"\"}</ListItemIcon>\n                <ListItemText primary={item.label} />\n              </ListItem>\n            );\n          }\n        })}\n      </List>\n    ) : (\n      <div></div>\n    );\n  };\n\n  componentDidMount() {}\n\n  render() {\n    const { classes, tab } = this.props;\n    \n    const {\n      anchorEl,\n      \n      open,\n      darkState,\n    \n      filepath,\n      logopath,\n      menuList,\n      \n    } = this.state;\n    const defaultlogo = pageBanner(\"topBar\");\n  \n   \n   \n    return (\n      <div\n        className={classes.root}\n        onMouseLeave={this.handleMenuClose.bind(this)}\n      >\n        <AppBar position=\"relative\" color=\"default\">\n          <Toolbar>\n            <Grid container spacing={2}>\n              {/* <Grid item xs={12} className={classes.flex}> */}\n              {logopath.length === 0 ? (\n                <Grid\n                  item\n                  md={4}\n                  sm={10}\n                  xs={10}\n                  style={{\n                    objectFit: \"cover\",\n                    width: \"100%\",\n                    maxWidth: \"100%\",\n                    //backgroundSize: \"cover\",\n                    // backgroundPositionX: 'left',\n                    background: `url(${defaultlogo} )  bottom no-repeat `,\n                    backgroundPosition: \"left\",\n                    backgroundSize: \"contain\",\n                  }}\n                ></Grid>\n              ) : (\n                \"\"\n              )}\n\n              {logopath.map((value, index) => {\n                return (\n                  <Grid\n                    item\n                    md={4}\n                    sm={10}\n                    xs={10}\n                    style={{\n                      objectFit: \"cover\",\n                      width: \"100%\",\n                      maxWidth: \"100%\",\n                      //backgroundSize: \"cover\",\n                      // backgroundPositionX: 'left',\n                      background: `url(${API_URL + `${filepath}` + \"/\" + `${value.logo}`} )  bottom no-repeat `,\n                      backgroundPosition: \"left\",\n                      backgroundSize: \"contain\",\n                    }}\n                  >\n                    <div></div>\n                  </Grid>\n                );\n              })}\n              <Grid item md={8} sm={2} xs={2}>\n                {(!this.props.noTabs || tab) && (\n                  <React.Fragment>\n                    <div className={classes.iconContainer}>\n                      <IconButton\n                        onClick={this.mobileMenuOpen}\n                        className={classes.iconButton}\n                        color=\"inherit\"\n                        aria-label=\"Menu\"\n                      >\n                        <MenuIcon />\n                      </IconButton>\n                    </div>\n                    <div className={classes.tabContainer}>\n                      <SwipeableDrawer\n                        classes={{\n                          paper: classes.swipeableDrawer, // class name, e.g. `classes-nesting-root-x`\n                        }}\n                        anchor=\"right\"\n                        open={this.state.menuDrawer}\n                        onClose={this.mobileMenuClose}\n                        onOpen={this.mobileMenuOpen}\n                      >\n                        <AppBar title=\"Menu\" />\n\n                        {this.renderMenu()}\n                      </SwipeableDrawer>\n                      {/* <Grid\n                      alignItems=\"flex-start\"\n                      justify=\"flex-end\"\n                      direction=\"row\"\n                      md={8}\n                      container\n                    > */}\n\n                      <Tabs\n                        value={this.state.value}\n                        indicatorColor=\"primary\"\n                        classes={{\n                          indicator: classes.indicator,\n                        }}\n                        centered\n                      >\n                        {menuData.map((item, index) => {\n                          return (\n                            <Tab\n                              key={index}\n                              selected\n                              onChange={this.handleChange}\n                              onMouseOver={(e) => this.handleMenuOpen(e, item)}\n                              //onClick={(e)=> this.handleMenuClick(e ,item)}\n                              component={Link}\n                              to={{\n                                pathname: item.pathname,\n                                search: this.props.location.search,\n                              }}\n                              classes={{ root: classes.tabItem }}\n                              label={item.label}\n                              aria-owns={open ? \"menu-list-grow\" : undefined}\n                              aria-haspopup={\"true\"}\n                            />\n                          );\n                        })}\n                      </Tabs>\n\n                      {menuList && menuList.length ? (\n                        <Popper\n                          open={open}\n                          anchorEl={anchorEl}\n                          id=\"menu-list-grow\"\n                        >\n                          <Paper>\n                            <MenuList>\n                              {menuList.map((value, index) => {\n                                return (\n                                  <MenuItem\n                                    component={Link}\n                                    to={{\n                                      pathname: value.pathname,\n                                      search: this.props.location.search,\n                                    }}\n                                    key={index}\n                                    //onClick={(e) => this.handleMenuClick(e, value)}\n                                    onClick={this.handleMenuClose}\n                                  >\n                                    {value.name}\n                                  </MenuItem>\n                                );\n                              })}\n                            </MenuList>\n                          </Paper>\n                        </Popper>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  </React.Fragment>\n                )}\n              </Grid>\n            </Grid>\n            <Box display=\"flex\" flexDirection=\"row\">\n              <Typography variant=\"subtitle1\" align=\"center\">\n                Light\n              </Typography>\n              <Switch checked={darkState} onChange={this.handleThemeChange} />\n              <Typography variant=\"subtitle1\" align=\"center\">\n                Dark\n              </Typography>\n            </Box>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(withStyles(customStyles)(Topbar));\n","D:\\my-app\\src\\genricSceen\\officebeares.js",[],"D:\\my-app\\src\\components\\tournaments\\ViewsDraws\\viewEntries.js",[],"D:\\my-app\\src\\components\\MobileView\\mobileView.js",[],"D:\\my-app\\src\\components\\MobileView\\playerlistView.js",[],"D:\\my-app\\src\\commons\\genricComponents\\infoComponent.js",[],"D:\\my-app\\src\\commons\\genricComponents\\pageloader.js",[],"D:\\my-app\\src\\commons\\genricComponents\\fontAwsomicon.js",[],"D:\\my-app\\src\\commons\\genricComponents\\titlize.js",[],"D:\\my-app\\src\\commons\\genricComponents\\fieldIcon.js",[],"D:\\my-app\\src\\commons\\formfunction.js",["526","527","528"],"import {regularExpData} from \"../formdata\"\nimport {commons} from \"../commons\"\nconst formValidation = {}\nconst fileSizeLimit = 1 * 1000 * 1000;\n\nformValidation.validatelogin = async (obj) => {\n    \n    obj.map(item => {\n        if (item.value !== undefined && item.value !== null && item.type !== \"number\" && item.value.toString().length) {\n            item.value = (typeof (item[\"value\"]) === \"string\") ? item[\"value\"].trim() : item[\"value\"]\n\n        }\n        let value = item[\"value\"];\n\n        if (item.type === \"number\" && item.value.toString().length > 0) item.value = parseInt(value)\n        // if (item.type == \"number\" && item.value.toString().length == 0) item.value = 0\n\n\n        \n\n        item.error = \"\"\n        if (item.required) {\n\n            if (item.value === undefined ||\n                (item.value !== undefined && item.value.toString().length === 0)\n            ) {\n                item[\"error\"] = item.displayName + \" required\";\n            }\n\n            else {\n                item[\"error\"]=\"\"\n            }\n        }\n\n\n\n        let fieldObj = regularExpData.find(obj => obj.name ? obj.name === item[\"key\"] :\"\")\n        \n   \n        if (fieldObj && fieldObj.regExp) {\n\n            if (value !== undefined && value.toString().length > 0\n                //&& (item.type === \"number\" && item.value != 0)\n\n            ) {\n                let status = fieldObj.regExp.test(value) ? true : false;\n                if (status) {\n                    item[\"error\"] = \"\";\n\n                }\n                else\n                    item['error'] = fieldObj.message;\n            }\n\n        }\n\n        // else if (fieldObj === undefined)\n        // {\n        //     item[\"error\"] = \"\";\n        //     }\n\n    })\n\n    \n\n\n    return obj;\n}\n\n//password vadiation\nformValidation.verifyPassword = (obj) => {\n    let passwordObj = obj.find(obj => obj.key.toLowerCase() === \"password\");\n    let confirmPasswordObj = obj.find(obj => obj.key.toLowerCase() === \"confirmpassword\");\n    if(passwordObj && confirmPasswordObj && passwordObj.value !== confirmPasswordObj.value) {\n        obj.find(item => {\n            if (item.key.toLowerCase()===\"confirmpassword\")\n                item.error=\"Reconfirm the password\"\n            \n            else {\n                item.error = \"\"\n\n            }\n        })\n  \n\n    }\n\n \n\n\n    return obj\n}\n//splitting the from \n formValidation.chunkArray = (chunk_size, arr) => {\n    \n    return arr.map(function (e, i) {\n        return i % chunk_size === 0 ? arr.slice(i, i + chunk_size) : null;\n    }).filter(function (e) { return e; });\n\n}\n\n //formvalidation\nformValidation.genricFromValidation = async (obj,x) => {\n\n    obj.map(item => {\n        if (item.value !== undefined && item.value !== null && item.type !== \"number\" && item.value.toString().length) {\n            item.value = (typeof (item[\"value\"]) === \"string\") ? item[\"value\"].trim() : item[\"value\"]\n\n        }\n        let value = item[\"value\"];\n\n        if (item.type === \"number\" && item.value.toString().length > 0) item.value = parseInt(value)\n       \n\n\n\n        item.error = \"\"\n\n        if (item.type === \"date\") {\n           \n     \n            var idate = commons.checkFuturedate(item.value);\n\n         \n            if (idate)\n\n            {\n               item[\"error\"] = \"DOB cannot be future\"\n            }\n            else {\n               item[\"error\"] = \"\"\n            }\n       \n        }\n\n      \n        \n\n            if (item.required) {\n\n            if (item.value === undefined ||\n                (item.value !== undefined && item.value.toString().length === 0)\n            ) {\n                item[\"error\"] = item.displayName + \" required\";\n            }\n\n            else {\n                item[\"error\"]=\"\"\n            }\n        }\n\n\n\n        let fieldObj = regularExpData.find(obj => obj.name.toLowerCase() === item[\"key\"].toLowerCase())\n        if (fieldObj && fieldObj.regExp) {\n\n          \n                let status = fieldObj.regExp.test(value) ? true : false;\n                if (status) {\n                  item[\"error\"] = \"\";\n                    if (item.verify)\n                    {\n                        if (item.value === x) {\n                            item[\"error\"] = \"\";\n\n                        }\n                       \n                        else\n                            item['error'] = \"Invalid otp\";\n                    }\n\n                \n                 \n                }\n                else\n                    item['error'] = fieldObj.message;\n            \n\n        }\n\n        // else if (fieldObj === undefined) {\n        //     item[\"error\"] = \"\";\n        // }\n\n\n    })\n\n    obj = await formValidation.verifyPassword(obj);\n     return obj;\n}\n//file validation\nformValidation.validateFile = (file) => {\n\n    let resJson = { \"status\": true, \"msg\": \"\" }\n    if (file === null) {\n        resJson[\"status\"] = false;\n        resJson[\"msg\"] = \"File cannot be empty\"\n    }\n    if (file) {\n\n\n        if (file.size > fileSizeLimit) {\n            resJson[\"msg\"] = \"File cannot exceed 1 MB\"\n            resJson[\"status\"] = false;\n        }\n\n\n\n    }\n\n  \n\n\n    return resJson\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nformValidation.validateFile = (file) => {\n\n    let resJson = { \"status\": true, \"msg\": \"\" }\n    if (file == null) {\n        resJson[\"status\"] = false;\n        resJson[\"msg\"] = \"File cannot be empty\"\n    }\n    if (file) {\n\n\n        if (file.size > fileSizeLimit) {\n            resJson[\"msg\"] = \"File cannot exceed 1 MB\"\n            resJson[\"status\"] = false;\n        }\n\n       \n\n    }\n\n\n\n    return resJson\n\n}\n\n\n\nexport default formValidation;","D:\\my-app\\src\\commons\\genricComponents\\snackbar.js",[],"D:\\my-app\\src\\components\\typo\\map.js",[],"D:\\my-app\\src\\formdata\\index.js",[],"D:\\my-app\\src\\globalUrls.js",[],"D:\\my-app\\src\\components\\MobileView\\responsiveListDilouge.js",[],"D:\\my-app\\src\\components\\contact\\assocList.js",[],"D:\\my-app\\src\\formdata\\matchdata.js",[],"D:\\my-app\\src\\formdata\\registeredclub.js",[],"D:\\my-app\\src\\formdata\\dashboardList.js",[],"D:\\my-app\\src\\formdata\\editDetils.js",[],"D:\\my-app\\src\\formdata\\drawresults.js",[],"D:\\my-app\\src\\formdata\\schedule.js",[],"D:\\my-app\\src\\formdata\\changePasswordFrom.js",[],"D:\\my-app\\src\\formdata\\eventsubscriptionlist.js",[],"D:\\my-app\\src\\formdata\\registerPlayer.js",[],"D:\\my-app\\src\\formdata\\verificationsteps.js",[],"D:\\my-app\\src\\formdata\\regex.js",["529","530","531","532","533","534","535","536"],"D:\\my-app\\src\\formdata\\formFields.js",[],"D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\viewProspectus.js",["537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555"],"import React from \"react\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\nimport Card from \"@material-ui/core/Card\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport Downloadpdf from \"../../../tournaments/ViewsDraws/drawsDialouge\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n//import Titleize from 'react-titleize';\n\nimport Paper from \"@material-ui/core/Paper\";\nimport customStyles from \"../../../../styles/genricStyle\";\n\n\n\nimport { ApiCall } from \"../../../../APIService\";\nimport { commons } from \"../../../../commons\";\nclass viewProspectus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \n            tournamentId: this.props.match.params.id,\n            open: false,\n         \n            value: \"Prospectus\",\n            ViewPdf: \"\",\n            validPdf: false,\n        };\n    }\n\n    componentDidMount() { \n\n   \n        this.setState({open: false });\n        let data= \"http://karnatakatt.com/pdf/fp-prospectus.pdf\"\n        const { tournamentId } = this.state;\n       \n                this.setState({\n                    loading: false,\n                    ViewPdf: data,\n                    open: true,\n                    validPdf: true,\n                });\n            \n            \n    };\n\n    validatepdf = (pdf) => {\n        const base64Rejex = /^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$/;\n        const check = base64Rejex.test(pdf); // base64Data is the base64 string\n        return check;\n    };\n\n    handleClose = () => {\n        this.setState({\n          \n            open: false,\n        });\n    };\n\n    render() {\n        const { classes } = this.props;\n        const {\n            buttonArr,\n            value,\n            open,\n            validPdf,\n            ViewPdf,\n            loading,\n            tournamentId,\n        } = this.state;\n\n       \n\n        return (\n            <React.Fragment>\n                <CssBaseline />\n\n                <div className={classes.root}>\n                   \n\n                    <Downloadpdf\n                        open={open}\n                        view={validPdf}\n                        ViewPdf={ViewPdf}\n                        tounamentgroup={value}\n                        onClose={this.handleClose}\n                        test={true}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(withStyles(customStyles)(viewProspectus));\n",["556","557"],"D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\showResults.js",[],"D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\userProfile.js",["558","559","560","561"],"import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport customStyles from \"../../../../styles/genricStyle\";\nimport FormGenerator from \"../../../../commons/genricComponents/formGenerator\"\nimport SnackPopup from \"../../../../commons/genricComponents/snackbar\"\nimport { ApiCall } from \"../../../../APIService\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { sessioncommons } from \"../../../../commons\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport formValidation from \"../../../../commons/formfunction\";\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { commons } from \"../../../../commons\";\nimport RefreshLoader from \"../../../../commons/genricComponents/pageloader\"\nimport moment from \"moment\";\n\nimport { editData } from \"../../../../formdata\"\n\nimport Container from '@material-ui/core/Container';\n\nclass userInfo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userProfile: [],\n            \"status\": false,\n            \"message\": \"\",\n            loading: false,\n            emessage:\"\",\n          \n        }\n  \n    }\n\n\n\n\n\n\n//api to fetch user data\n    loadUserData = () => {\n       \n        let loggeduser = sessioncommons.getUser();\n        let params = {};\n\n      \n        params.type = \"fetchProfile\";\n\n        params.apiKey = \"apikey\";\n        params.caller = \"caller\";\n        \n        var result = {};\n        result['userId'] = loggeduser.userId\n        params.data = JSON.stringify(result);\n        this.setState({ loading: true });\n        ApiCall(\"POST\", params, \"core\")\n            .then(res => res.json())\n            .then(res => {\n                if (res.status === \"success\" && res.result) {\n                    let profile = res.result\n                    let formDataInput = [...this.state.userProfile];\n\n                  \n                    formDataInput.map((item, index) => {\n\n                        if (item.key === \"dateOfBirth\") {\n                            item[\"value\"] = moment(profile[item.key]).format('YYYY-MM-DD')\n                        }\n                        else if (item.key === \"gender\")\n                        {\n                            item[\"value\"] = profile[item.key].toLowerCase();  \n                            }\n                        else {\n                            item[\"value\"] = profile[item.key] ? profile[item.key] : ''\n\n                        }\n\n\n\n                    })\n\n\n\n\n\n                    this.setState({ \"userProfile\": formDataInput, loading: false, })\n                \n                }\n                else if (res.status === \"failure\") {\n\n                    this.setState({\n\n\n                        \"emessage\": res.response, loading: false \n\n                    });\n                }\n\n\n\n            }).catch(error => {\n                commons.errorLog(error)\n            });\n\n\n\n     \n    };\n//user data fileds\n    loadform=()=>{\n    let formDataControl = [...JSON.parse(JSON.stringify(editData))];\n    this.setState(\n        {\n            \"userProfile\": formDataControl,\n        },\n        () => {\n            this.loadUserData();\n        }\n    );\n    }\n\n\n    componentDidMount() {\n       \n        this.loadform()\n      \n       \n}\n\n\n\n\n   \n\n//updated user data submitting to sever\n   \n    verifyForm = async (e) => {\n\n        e.preventDefault();\n        let loggeduser = sessioncommons.getUser();\n        let formData = this.state.userProfile;\n     \n        formData = await formValidation.genricFromValidation(formData);\n       \n        let errResult = formData.find((item) => {\n\n            if (item && item.error.length) return item;\n        })\n\n        this.setState({ formData: formData });\n\n\n        if (errResult === undefined) {\n\n            const data = {};\n            const formvalues = this.state.formData;\n            formvalues.map((obj) => {\n                if (obj.key === \"dateOfBirth\")\n                \n                    data[obj.id] = moment(obj.value).format('DD MMM YYYY');\n                else {\n                    data[obj.id] = obj.value\n                }\n            });\n\n           \n            var result = {};\n            var params = {};\n            params.apiKey = \"apikey\";\n            params.caller = \"caller\";\n            params.type = \"editProfile\";\n        \n            \n            result.userId = loggeduser.userId;\n            result.userName = data.userName;\n            result.gender = data.gender\n            result.phoneNumber = data.phoneNo\n            result.dateOfBirth = data.DOB;\n\n      \n          \n            result.pinCode = data.pinCode;\n            result.address = data.address;\n            result.city = data.city;\n            params.data = JSON.stringify(result);\n            this.setState({ loading: true });\n            ApiCall(\"POST\", params, \"core\")\n                .then(res => res.json())\n                .then(res => {\n                    if (res) {\n                        this.setState({ \"status\": true, \"message\": \"\", loading: false })\n                        let message = (res.status === \"success\") ? res.response : \"Could not update user profile\"\n                        if (res.status === \"success\") {\n                            if (res.response)\n                                this.setState({ \"message\": message, loading: false })\n                           \n                        }\n\n                    }\n  \n                })\n                .then((res) => {\n                    this.loadform();\n                })\n                \n                .catch(error => {\n                    commons.errorLog(error)\n                });\n\n        };\n    }\n\n    onChange = (e) => {\n\n        let formDataInput = [...this.state.userProfile];\n       \n        formDataInput.find((item) => {\n\n\n            if (item.key === e.target.name) {\n                (item.type === \"number\") ? item.value = parseInt(e.target.value) : item.value = e.target.value;\n\n                if (item.key === e.target.name && item.type !== \"string\") item.value = e.target.value;\n                if (item.type === \"date\") {\n                \n                    //let formatDate = moment(e.target.value).format('DD MMM YYYY');\n                    item.value = e.target.value\n\n                    //console.log(\"mokme\", moment(e.target.value).format('DD MMM YYYY'))\n\n\n                }\n\n                if (item.key === e.target.name && item.id === \"email\") {\n                    item.value = e.target.value;\n                 \n                }\n                else if (item.key === e.target.name && item.type === \"string\") item.value = e.target.value;\n\n            }\n\n\n\n        })\n        this.setState({ formData: formDataInput });\n\n\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { userProfile, loading, message, emessage } = this.state;\n\n     \n\n        let role_groups = formValidation.chunkArray(2, userProfile);\n\n\n        return (\n\n            <React.Fragment>\n                <CssBaseline />\n           \n                <div className={classes.root}>\n                    <Container maxWidth=\"sm\">\n                        <Card className={classes.card} style={{ margin: '10px' }}>\n                            <CardHeader\n                                title=\"Edit User\" />\n                            <CardContent>\n                                <Grid align=\"center\" justify=\"center\" container >\n                                    <Grid>\n                                        <RefreshLoader display=\"normal\" loading={loading} />\n                                    </Grid>\n                                </Grid>\n                                <FormGenerator\n                                    // formList={userProfile} onChange={this.onChange} variant=\"standard\"\n\n                                    groups={role_groups} groupBy={2}\n                                    onChange={this.onChange} variant=\"standard\"\n                                />\n\n                            </CardContent>\n\n\n\n                        </Card>\n                    \n                    </Container>\n                          \n                   \n\n                    {(message.length) ? (<SnackPopup message={message} type=\"success\" />) : (emessage.length) ? (<SnackPopup message={`${emessage} Please try after some time!!` } type=\"error\" />) : \"\"}\n\n                    <Button onClick={this.verifyForm} disabled={(loading || emessage.length)? true : false}\n                                style={{ marginTop: 10 }}>\n                                Submit\n                                </Button>\n\n                            {/* {formData.map((item, index) => {\n                                    const styleObj = {};\n                                    if (item.hidden) styleObj[\"display\"] = \"none\";\n\n                                    return (<TextField\n                                        key={index}\n                                        variant='outlined'\n                                        type={item.type}\n                                        disabled={item.disabled ? true : false}\n                                        hidden={item.hidden ? true : false}\n                                        label={item.hidden ? '' : item.displayName}\n                                        name={item.key}\n                                        fullWidth\n                                        margin=\"normal\"\n                                        value={item.value}\n                                        onChange={this.onChange}\n                                        error={item.error.length ? true : false}\n                                        helperText={item.error}\n                                        autoComplete=\"off\"\n                                        style={styleObj}\n                                    />)\n\n                                })} */}\n\n\n\n\n                           \n\n                      \n                    \n               \n\n\n\n\n                                \n                               \n                       \n                   \n                </div>\n            </React.Fragment>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        )\n    }\n\n}\nexport default withStyles(customStyles)(userInfo);\n","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\scheduletour.js",[],"D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\GiveEntries.js",["562","563"],"\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport customStyles from \"../../../../styles/genricStyle\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport SnackPopup from \"../../../../commons/genricComponents/snackbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { ApiCall } from \"../../../../APIService\";\nimport { sessioncommons } from \"../../../../commons\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n\nimport MaterialTable from \"material-table\";\nimport { tableIcons } from \"../../../../formdata\";\nimport { commons } from \"../../../../commons\";\n\nlet selectionFlag = false;\nclass subscribeEvent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      subsciptionData: \"\",\n      eventlist: [],\n      order_id: {},\n      checkedEvent: [],\n      data: [],\n      emptyuser: \"\",\n      result: {\n        oldSubscribeId: [],\n        subscribeId: [],\n        unSubscribeId: [],\n      },\n      checkedFees: [],\n      subscibedEvent: [],\n      showpayment: false,\n      eventFeeslist: {},\n      // fees: 0,\n      displayName: \"Event Details\",\n    };\n  }\n//load the event list for the given userid\n  updateData = () => {\n    let loggeduser = sessioncommons.getUser();\n    let tournamentdata = sessioncommons.getTournament();\n    let params = {};\n\n    params.type = \"events\";\n    params.userId = loggeduser.userId;\n    params.tournamentId = tournamentdata.tournamentId;\n      params.apiKey = \"apikey\";\n    params.caller = \"caller\";\n\n    this.setState({ loading: true });\n    ApiCall(\"POST\", params, \"core\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (!res[\"status\"]) {\n          // console.log(\"api error\" + res[\"status\"]);\n        }\n        return res;\n      })\n      .then((res) => {\n        if (res.data && res.data.length > 0) {\n          res.data.forEach((el) => {\n            const index = res.eventFeeSettings.events.findIndex(\n              (x) => x === el.abbName\n            );\n            el.eventfee = res.eventFeeSettings.eventFees[index];\n          });\n\n          let feeTotal;\n        \n          const oldSubId = [];\n          res.data.forEach((e) => {\n            if (e.hasOwnProperty(\"eventParticipants\")) {\n              if (e.eventParticipants.indexOf(loggeduser.userId) > -1) {\n                e.subscibedEvent = true;\n                oldSubId.push(e.abbName);\n                feeTotal = 0;\n                // const z = feeList.push(e.eventfee);\n                // feeTotal = feeList.reduce((accumulator, currentValue) => parseInt(accumulator) +parseInt(currentValue), 0)\n              } else {\n                e.subscibedEvent = false;\n              }\n            } else {\n              e.subscibedEvent = false;\n            }\n\n            this.setState({\n              checkedFees: feeTotal,\n              loading: false,\n              result: {\n                oldSubscribeId: oldSubId,\n              },\n              eventlist: res[\"data\"],\n              // checkedEvent: checkedEvent,\n              // checkedFees: l\n            });\n          });\n        } else if (res.message) {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n\n  componentDidMount() {\n    this.updateData();\n  }\n\n  // subscribecalcultion = (ro, value) => {\n  //\n  //   const subsribedlist = []\n  //   const feeList = [];\n  //   let feeTotal;\n  //   const row = [...this.state.eventlist];\n  //   if (value === \"limited\") {\n  //     row.forEach(ro => {\n  //       if (ro._id === r._id) ro.subscibedEvent = e.target.checked;\n  //       if (ro.subscibedEvent) {\n\n  //         if (this.state.result.oldSubscribeId.includes(ro.abbName)) {\n  //           const z = subsribedlist.push(ro.eventfee);\n  //           feeTotal = \"Already subscribed\"\n  //         }\n  //         else {\n  //           const z = feeList.push(ro.eventfee);\n\n  //           feeTotal = JSON.stringify(feeList.reduce((accumulator, currentValue) => parseInt(accumulator) + parseInt(currentValue), 0))\n  //         }\n  //       }\n  //     });\n\n  //     }\n  //   else if (value == \"checkedAll\")\n  //   {\n  //     row.forEach(ro => {\n  //       const selectedAll = rows.length === this.state.eventlist.length;\n  //       ro.subscibedEvent = selectedAll;\n  //       if (selectedAll) {\n\n  //         if (this.state.result.oldSubscribeId.includes(ro.abbName)) {\n  //           const z = subsribedlist.push(ro.eventfee);\n  //           feeTotal = \"Already subscribed\"\n  //         }\n  //         else {\n  //           const z = feeList.push(ro.eventfee);\n\n  //           feeTotal = JSON.stringify(feeList.reduce((accumulator, currentValue) => parseInt(accumulator) + parseInt(currentValue), 0))\n  //         }\n  //       }\n\n  //     });\n\n  //     }\n\n  //   this.setState({\n  //     eventlist: row,\n  //     checkedFees: feeTotal\n  //   });\n\n  // }\n\n  selectionChange = (rows) => {\n    const subsribedlist = [];\n    let feeTotal;\n    const feeList = [];\n    if (selectionFlag) {\n      selectionFlag = false;\n      return;\n    }\n    if (rows.length === this.state.eventlist.length || rows.length === 0) {\n      const row = [...this.state.eventlist];\n      row.forEach((ro) => {\n        const selectedAll = rows.length === this.state.eventlist.length;\n        ro.subscibedEvent = selectedAll;\n        if (selectedAll) {\n          if (this.state.result.oldSubscribeId.includes(ro.abbName)) {\n            subsribedlist.push(ro.eventfee);\n            feeTotal = 0;\n          } else {\n             feeList.push(ro.eventfee);\n\n            feeTotal = JSON.stringify(\n              feeList.reduce(\n                (accumulator, currentValue) =>\n                  parseInt(accumulator) + parseInt(currentValue),\n                0\n              )\n            );\n          }\n        }\n      });\n\n      this.setState({\n        eventlist: row,\n        checkedFees: feeTotal,\n      });\n    }\n  };\n\n  updateSelection = (e, r) => {\n    const subsribedlist = [];\n    const feeList = [];\n    let feeTotal;\n    selectionFlag = true;\n    const row = [...this.state.eventlist];\n    row.forEach((ro) => {\n      if (ro._id === r._id) ro.subscibedEvent = e.target.checked;\n      if (ro.subscibedEvent) {\n        if (this.state.result.oldSubscribeId.includes(ro.abbName)) {\n           subsribedlist.push(ro.eventfee);\n        \n        } else {\n            feeList.push(ro.eventfee);\n\n          feeTotal = JSON.stringify(\n            feeList.reduce(\n              (accumulator, currentValue) =>\n                parseInt(accumulator) + parseInt(currentValue),\n              0\n            )\n          );\n        }\n      }\n    });\n\n    this.setState({\n      eventlist: row,\n      checkedFees: feeTotal,\n    });\n  };\n\n\n//function payment gateway(razor pay)\n  displayRazorpay = async () => {\n  \n\n    let loggeduser = sessioncommons.getUser();\n    const res = await commons.loadScript (\n      \"https://checkout.razorpay.com/v1/checkout.js\"\n    );\n\n    if (!res) {\n      alert(\"Razorpay SDK failed to load. Are you online?\");\n      return;\n    }\n//function to get order_id to pass to options\n    await this.loadpaymentdata();\n\n    const options = {\n      key: \"rzp_test_ipbJ8OB0OUxB2u\",\n      currency: \"INR\",\n      amount: (parseInt(this.state.checkedFees) * 100).toString(),\n      order_id: this.state.order_id,\n      name: \"KTTA\",\n      description: \"Subsciption amount\",\n\n      handler: (response) => {\n        if (response.razorpay_payment_id) {\n          this.calculate(response.razorpay_payment_id);//calculate the fees\n        }\n      },\n      prefill: {\n        name: loggeduser.userName,\n        email: loggeduser.emailAddress,\n        phone_number: \"9899999999\",\n      },\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.on(\"payment.failed\", function (response) {\n      alert(response.error.description);\n    });\n    paymentObject.open();\n  };\n//api call for  oder_id for payment \n  loadpaymentdata = async () => {\n    let loggeduser = sessioncommons.getUser();\n    let timeStamp = loggeduser.affiliationId + \"_\" + Math.floor(Date.now());\n    let apiData = {};\n    apiData.amount = (parseInt(this.state.checkedFees) * 100).toString();\n      apiData.receipt = timeStamp;\n    await ApiCall(\"POST\", apiData, \"payment\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (res) {\n          this.setState({ order_id: res.orderId });\n        }\n      })\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n//fee calculation function\n  calculate = (transactionID) => {\n    const newSubId = [];\n    let unSubId = [];\n\n    this.state.eventlist.map((e) => {\n      if (\n        e.subscibedEvent &&\n        this.state.result.oldSubscribeId.indexOf(e.abbName) === -1\n      )\n        newSubId.push(e.abbName);\n    });\n    this.state.eventlist.map((e) => {\n      if (\n        newSubId.indexOf(e.abbName) === -1 &&\n        this.state.result.oldSubscribeId.indexOf(e.abbName) !== -1 &&\n        !e.subscibedEvent\n      )\n        unSubId.push(e.abbName);\n    });\n\n    const result = { ...this.state.result };\n    result.unSubscribeId = unSubId;\n    result.subscribeId = newSubId;\n\n    this.setState(\n      {\n        result: result,\n      },\n      () => {\n        this.onSubmit(transactionID);//api call to sever to store the trnsaction id \n      }\n    );\n  };\n  \n  //api call to sever to store the transaction id \n  onSubmit = async (transactionID) => {\n    const { result, checkedFees } = this.state;\n\n    let loggeduser = sessioncommons.getUser();\n    let tournamentdata = sessioncommons.getTournament();\n    let params = {};\n\n    params.type = \"eventSubscribe\";\n      params.caller = \"caller\";\n      params.apiKey = \"apikey\";\n      params.data = {\n      userId: loggeduser.userId,\n      tournamentId: tournamentdata.tournamentId,\n      subscribeID: result.subscribeId,\n      unSubscribeID: result.unSubscribeId,\n      transactionID: transactionID,\n      transactionAmount: checkedFees,\n      transactionType: \"none\",\n      oldSubscribeID: result.oldSubscribeId,\n    };\n\n    this.setState({ loading: true });\n    await ApiCall(\"POST\", params, \"core\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.message === \"success\") {\n          this.setState({ subsciptionData: res.message, loading: false });\n        } else {\n          // this.setState({ \"pwdStatus\": true, \"dialogOpen\": true, loading: false })\n          // this.resetForm();\n        }\n      })\n\n      .then((res) => {\n        this.updateData();//call the event list api with the upated subscibed/unsubscibed events for the logged user.\n      })\n\n      .catch((error) => {\n        commons.errorLog(error);\n      });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n      eventlist,\n     \n      displayName,\n      checkedFees,\n      result,\n      loading,\n      subsciptionData,\n     \n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n\n        <div className={classes.root}>\n          {/* <Grid container justify=\"center\"> */}\n\n          <MaterialTable\n            title={displayName}\n            columns={[\n              {\n                field: \"eventName\",\n                title: \"EventName\",\n              },\n              {\n                field: \"eventfee\",\n                title: \"EventFees\",\n\n              \n              },\n              {\n                title: \"Total\",\n                align: \"right\",\n              \n              },\n            ]}\n          \n\n            data={eventlist}\n            isLoading={loading}\n            icons={tableIcons}\n            options={{\n              toolbar: true,\n              showTextRowsSelected: false,\n              padding: \"dense\",\n              maxBodyHeight: 600,\n              search: false,\n              selection: true,\n              paging: false,\n              filtering: false,\n              \n              headerStyle: {\n                backgroundColor: \"#f44336a6\",\n                color: \"#FFF\",\n              },\n              rowStyle: {\n                color: \"#000000\",\n              },\n              selectionProps: (rowData) => ({\n                disabled: result.oldSubscribeId.indexOf(rowData.abbName) !== -1,\n                checked: rowData.subscibedEvent || false,\n                onClick: (e) => {\n                  this.updateSelection(e, rowData);\n                },\n              }),\n            }}\n            onSelectionChange={(rows) => {\n              this.selectionChange(rows);\n            }}\n          />\n          {!loading ? (\n            <React.Fragment>\n              <TableContainer component={Paper}>\n                <Table aria-label=\"spanning table\">\n                  <TableBody>\n                    <TableRow>\n                      <TableCell>\n                        Event Event Registration Fee (Non-Refundable)\n                      </TableCell>\n                      <TableCell>{checkedFees}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n\n              <Button\n                onClick={this.displayRazorpay}\n                disabled={checkedFees && checkedFees.length ? false : true}\n                className={classes.subsciptionbutton}\n              >\n                Submit\n              </Button>\n            </React.Fragment>\n          ) : (\n            \"\"\n          )}\n\n          {subsciptionData.length ? (\n            <SnackPopup\n              message={`${subsciptionData} Subsciption is active now`}\n              type=\"success\"\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(customStyles)(subscribeEvent);\n","D:\\my-app\\src\\components\\login\\dashboardcomp\\userVerification\\idverifiction.js",[],["564","565"],"D:\\my-app\\src\\components\\tournaments\\ViewsDraws\\drawsDialouge.js",["566"],"D:\\my-app\\src\\commons\\genricComponents\\formGenerator.js",["567","568","569"],"import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Grid from \"@material-ui/core/Grid\"\n\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport {  withRouter } from \"react-router-dom\";\n\nimport customStyles from \"../../styles/genricStyle\";\n\nclass FormGenerator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formList: [],\n            data: this.props.data,\n            groups:[]\n           \n        }\n    }\n\n    componentDidMount() {\n        if (this.props.formList) this.setState({ formList: this.props.formList })\n     \n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.formList !== this.props.formList) {\n            if (this.props.formList) this.setState({ formList: this.props.formList })\n        }\n\n      \n    }\n//show hidden password\n    handleClickShowPassword = (item) => {\n     \n        if (!this.props.groups) {\n            let formDataInput = [...this.state.formList];\n            let showPassword;\n            if (item && item.type === \"password\" && item.showPassword) showPassword = item.showPassword;\n            item.showPassword = (!showPassword)\n            formDataInput.find(nestedItem => {\n                if (nestedItem.key === \"password\" && nestedItem.key === item.key) nestedItem = item;\n            })\n\n            this.setState({ formList: formDataInput })\n        }\n\n        else\n        {\n            let formDataInput = [...this.state.groups];\n            let showPassword;\n            if (item && item.type === \"password\" && item.showPassword) showPassword = item.showPassword;\n            item.showPassword = (!showPassword)\n            formDataInput.map(nestedItem => {\n                nestedItem.find((option, index) => {\n                    if (option.key === \"password\" && option.key === item.key) option = item;\n                })\n               \n            })\n\n            this.setState({ groups: formDataInput })  \n            }\n    }\n\n  \n\n//dropdown data\n    showDropDown = (nestedItem) => {\n        if (nestedItem && nestedItem.key === \"clubNameId\") {\n  \n           // const {registredClub} =this.state\n            //let genricData = [];\n            this.props.data.forEach(item => {\n                nestedItem.options.push({ \"value\": item.clubName, \"key\": item.clubName })\n\n            })\n            //let x = Object.assign(nestedItem, { \"options\": genricData }) \n        \n            // this.state.registredClub.map(item => {\n            //     genricData.push({ \"options\": { \"value\": item.clubName, \"key\": item.clubName } })\n\n            // })\n            const dropDownOptions = nestedItem.options.map((option, index) => {\n                return (<option key={index} value={option.value} >\n                    {option.key}\n                </option>)\n            })\n            return dropDownOptions\n\n\n         }\n        \n        else {\n            const dropDownOptions = nestedItem.options.map((option, index) => {\n                return (<option key={index} value={option.value} >\n                    {option.key}\n                </option>)\n            })\n            return dropDownOptions\n\n        }\n    }\n\n\n    render() {\n\n        const { onChange, classes,variant } = this.props;\n        const { formList} = this.state;\n        \n        let content = \"\"\n        if (this.props.groupBy) {\n            let md = 12;\n            let xs = 12;\n            if (this.props.groupBy === 3) md = 4\n            if (this.props.groupBy === 2) md = 6\n            content = this.props.groups.map((groupItem, groupIndex) => {\n                \n                return (\n                    <Grid container spacing={5}  key={groupIndex} >\n                        {groupItem.map((item, index) => {\n                            const styleObj = {};\n                            if (item.hidden) styleObj[\"display\"] = \"none\";\n\n                            \n                                                   \n                                                \n                            if (item.upperCase) item.value = item.value.toUpperCase()\n\n                            return (<Grid item xs={xs} md={md} key={index}>\n                                <TextField\n                                    SelectProps={{\n                                        native: true,\n                                        MenuProps: {\n                                            className: classes.menu\n                                        }\n                                    }}\n                                    id=\"component-simple\"\n                                    margin=\"normal\"\n                                   \n                                    fullWidth\n                                    disabled={item.disabled ? true : false}\n                                    variant={variant ? variant : \"outlined\"}\n                                    select={item.select}\n                                    autoComplete=\"off\"\n                                    label={item.displayName ? item.displayName :\"\"}\n                                    name={item.key}\n                                    value={item.value}\n                                    onChange={onChange}\n                                    multiline={item.multiline}\n                                    style={styleObj}\n                                    rowsMax={item.rowsMax}\n                                   //disabled={!editMode || item.disabled}\n                                    rows={item.rows}\n                                    type={(item.type !== \"select\" && item.type !== \"password\") ? item.type : ((item.type === \"password\" && item.showPassword) ? 'text' : 'password')}\n                                    format=\"dd/mm/yyyy\"\n                                    error={(item.error && item.error.length) ? true : false}\n                                    helperText={item.error}\n                                    InputProps={{\n                                        endAdornment: (\n                                            (item.type === \"password\") ? (<InputAdornment position=\"end\">\n                                                <IconButton\n                                                    onClick={() => this.handleClickShowPassword(item)}\n                                                >\n                                                    {item.showPassword ? <Visibility /> : <VisibilityOff />}\n                                                </IconButton>\n\n                                            </InputAdornment >) : false\n                                        ),\n                                    }\n                                    }\n                                    InputLabelProps={{ shrink: true }}>\n                                    {(item.select ) ? (\n                                        this.showDropDown(item)\n                                    ) : ''}\n                                   \n\n\n                                </TextField>\n                               \n\n                            </Grid >)\n                        })}</Grid>)\n            })\n        }\n        else {\n            content = formList.map((item, index) => {\n                const styleObj = {};\n               \n                if (item.hidden) styleObj[\"display\"] = \"none\";\n              \n                return (\n                  \n                    <React.Fragment>\n                    <TextField\n                    id={item.key}\n                    select={item.select}\n                    key={index}\n                            variant={variant? variant:\"outlined\"}\n                    //type={item.type}\n                    disabled={item.disabled ? true : false}\n                    hidden={item.hidden ? true : false}\n                            label={item.displayName ? item.displayName :\"\"}\n                    name={item.key}\n                    type={(item.type !== \"select\" && item.type !== \"password\") ? item.type : ((item.type === \"password\" && item.showPassword) ? 'text' : 'password')}\n                    fullWidth\n                         \n                    margin=\"normal\"\n                    value={item.value}\n                    onChange={onChange}\n                    error={(item.error && item.error.length) ? true : false}\n                    helperText={item.error}\n                    autoComplete=\"off\"\n                    style={styleObj}\n                    rows={item.rows}\n                    multiline={item.multiline}\n                    rowsMax={item.rowsMax}\n                    InputLabelProps={{ shrink: true }}\n                    InputProps={{\n                        endAdornment: (\n                            (item.type === \"password\") ? (<InputAdornment position=\"end\">\n                                <IconButton\n                                    onClick={() => this.handleClickShowPassword(item)}\n                                >\n                                    {item.showPassword ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                                 \n                            </InputAdornment >) : false\n                        ),\n                    }\n                    }\n\n                    >\n                      \n\n                            {(item.select) ? (\n                        this.showDropDown(item)\n                    ) : ''}\n                        </TextField>\n                   \n                      \n\n\n\n                       \n                    \n                    </React.Fragment>\n                   \n                   \n                    \n                    \n                )\n              \n                \n            })\n             \n            \n           \n\n          \n        }\n\n\n\n        return content\n    }\n\n}\n\nexport default withRouter(withStyles(customStyles)(FormGenerator));\n\n\n","D:\\my-app\\src\\components\\login\\dashboardcomp\\genicPayemnt.js",["570","571","572","573","574"],"import Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport React, { Component } from \"react\";\nclass Payment extends React.Component {\n    // const[alignment, setAlignment] = React.useState('left');\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            subvalue: this.props.fomdata,\n\n        };\n    }\n    componentDidMount() {\n        //this.checkidverification()\n        \n         this.showrazorPay()\n\n\n\n    }\n\n    // parentupdate = (value) => {\n    //     handleChildUpdate(value)\n    // }\n    loadScript = (src) => {\n        return new Promise((resolve) => {\n            const script = document.createElement('script')\n            script.src = src\n            script.onload = () => {\n                resolve(true)\n            }\n            script.onerror = () => {\n                resolve(false)\n            }\n            document.body.appendChild(script)\n        })\n    }\n\n   \n    showrazorPay = async () => {\n       \n      \n     \n      \n        const res = await this.loadScript('https://checkout.razorpay.com/v1/checkout.js')\n\n        if (!res) {\n            alert('Razorpay SDK failed to load. Are you online?')\n            return\n        }\n\n        await this.props.orderId()\n\n    \n        const options = {\n            key: 'rzp_test_ipbJ8OB0OUxB2u',\n            currency: \"INR\",\n            amount: (parseInt(this.props.orderno.checkedFees) * 100).toString(),\n            order_id: this.props.orderno.order_id,\n            name: 'KTTA',\n            description: 'Subsciption amount',\n\n            handler: (response) => {\n\n                if (response.razorpay_payment_id)\n                \n                { this.props.submit(response.razorpay_payment_id) }\n\n\n\n\n\n\n            },\n            prefill: {\n                name: this.state.subvalue.userName,\n                email: this.state.subvalue.emailAddress,\n                phone_number: '9899999999'\n            }\n        }\n        const paymentObject = new window.Razorpay(options)\n        paymentObject.on('payment.failed', function (response) {\n\n            alert(response.error.description);\n\n        });\n        paymentObject.open()\n\n    };\n\n    render() {\n        const { classes, loading } = this.props;\n        const { value } = this.state;\n\n        return (\n            <React.Fragment>\n                <CssBaseline />\n                <div\n\n                >\n\n                  \n\n\n                </div>\n               \n                       \n                         \n            </React.Fragment>\n        );\n    }\n}\nexport default (Payment);\n",["575","576"],"D:\\my-app\\src\\formdata\\clubassocid.js",[],"D:\\my-app\\src\\formdata\\tableIcons.js",[],"D:\\my-app\\src\\formdata\\button.js",[],"D:\\my-app\\src\\formdata\\registeredAssociation.js",[],"D:\\my-app\\src\\components\\players\\dialouges\\baseDialouge.js",[],"D:\\my-app\\src\\formdata\\viewDrawsMenu.js",[],"D:\\my-app\\src\\formdata\\statistics.js",[],"D:\\my-app\\src\\formdata\\playerDetailsCol.js",[],"D:\\my-app\\src\\components\\about\\registeredClub.js",[],"D:\\my-app\\src\\components\\about\\registeredAssoc.js",[],"D:\\my-app\\src\\components\\tournaments\\ViewsDraws\\draws.js",["577"],"D:\\my-app\\src\\genricSceen\\registerdClub.js",[],"D:\\my-app\\src\\components\\landingPage\\linkpage.js",[],"D:\\my-app\\src\\formdata\\standings.js",[],"D:\\my-app\\src\\formdata\\menuData.js",[],"D:\\my-app\\src\\config\\bannerConfig.js",[],"D:\\my-app\\src\\components\\socialMediaExtracts\\mediaExtracts.js",[],"D:\\my-app\\src\\commons\\genricComponents\\imageClass.js",[],"D:\\my-app\\src\\components\\landingPage\\Sponsers.js",["578","579"],"import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\n\n\nimport { ApiCall } from \"../../APIService\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { API_URL } from \"../../globalUrls\";\nimport { commons } from \"../../commons\";\nimport InfoComponent from \"../../commons/genricComponents/infoComponent\";\n\n\nexport default class Sponsers extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sponsers: [],\n      filepath: \"\",\n    };\n  }\n//api call fo sponsers data\n  loadSponsersData = () => {\n    let apiData = {};\n    apiData.tableName = \"sponsers\";\n    \n    apiData.type = \"getData\";\n\n    ApiCall(\"POST\", apiData, \"getData\")\n      .then((res) => res.json())\n      .then((res) => {\n        if (!res[\"status\"]) {\n          console.log(\"api error\" + res[\"status\"]);\n        }\n        return res;\n      })\n      .then((res) => {\n        this.setState({\n          sponsers: res[\"getData\"],\n          filepath: res[\"imagePath\"],\n        });\n      })\n      .catch((error) => {\n        commons.errorLog(error)\n      });\n  };\n\n  componentDidMount = () => {\n    this.loadSponsersData();\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { sponsers, filepath } = this.state;\n    \n\n    return (\n      <React.Fragment>\n        <div className={classes.root}>\n          {/* <Grid container justify=\"center\"> */}\n\n          <div style={{ display: \"flex\" }}>\n            <Typography variant=\"h6\" component=\"h6\" style={{ flex: 1 }}>\n              {\" \"}\n              Sponsors\n            </Typography>\n          </div>\n          <Divider />\n\n          <Paper style={{ marginTop: 20 }}>\n            <Grid container spacing={1} justify=\"center\">\n              {sponsers.length ? (\n                sponsers.map((newsRow, newsIndex) => {\n                  return (\n                    <Grid key={newsIndex} item>\n                      <img\n                        style={{\n                          height: 100,\n                          width: 100,\n                          marginTop: 20,\n                        }}\n                       alt=\"\" src={API_URL + `${filepath}` + \"/\" + `${newsRow.image}`}\n                      ></img>\n                    </Grid>\n                  );\n                })\n              ) : (\n                <InfoComponent\n                  variant=\"h4\"\n                  message=\"No Data available yet!!!\"\n                />\n              )}\n            </Grid>\n          </Paper>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","D:\\my-app\\src\\components\\landingPage\\RegisteredAssoc.js",[],"D:\\my-app\\src\\components\\landingPage\\RegistredCulb.js",[],"D:\\my-app\\src\\components\\landingPage\\OfficeBearers.js",[],"D:\\my-app\\src\\components\\landingPage\\StatisticsContent.js",[],"D:\\my-app\\src\\components\\landingPage\\StandingContent.js",[],"D:\\my-app\\src\\components\\landingPage\\NewsContent.js",[],"D:\\my-app\\src\\components\\landingPage\\Footer.js",[],"D:\\my-app\\src\\components\\login\\dashboardcomp\\logout.js",[],"D:\\my-app\\src\\components\\MobileView\\rankingView.js",[],"D:\\my-app\\src\\components\\players\\dialouges\\tabledisplay.js",[],"D:\\my-app\\src\\genricSceen\\newsPage.js",["580"],"import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ViewMorePage from \"../components/landingPage/linkpage\";\nimport Titlize from \"../commons/genricComponents/titlize\";\nimport customStyles from \"../styles/genricStyle\";\nimport LinesEllipsis from \"react-lines-ellipsis\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport Button from \"@material-ui/core/Button\";\nimport Topbar from \"../components/landingPage/TopBar\"; \n//import {newsData} from \"../../formdata\"\nimport RefreshLoader from \"../commons/genricComponents/pageloader\";\nimport { uiCommons } from \"../commons\";\nimport { ApiCall } from \"../APIService\";\nimport { API_URL } from \"../globalUrls\";\nimport { commons } from \"../commons\";\nimport InfoComponent from \"../commons/genricComponents/infoComponent\";\nconst gridColumns = 2;\nconst gridRows = 3;\n//genric component for dispalying the data in landing page  and detailing page of news component\n class GenricNewsContent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newsData: [],\n            filepath: \"\",\n            loading: false\n        };\n    }\n//api fo getting news\n    loadNewsData = () => {\n        let apiData = {};\n        apiData.tableName = \"news\";\n        apiData.client_key = \"ktta\";\n        apiData.type = \"getData\";\n        this.setState({ loading: true });\n        ApiCall(\"POST\", apiData, \"getData\")\n            .then((res) => res.json())\n            .then((res) => {\n                this.setState({\n                    loading: false,\n                    newsData: res[\"getData\"],\n                    filepath: res[\"imagePath\"],\n                });\n            })\n            .catch((error) => {\n                commons.errorLog(error)\n            });\n    };\n    componentDidMount = () => {\n        this.loadNewsData();\n    };\n\n    render() {\n        const { classes, type } = this.props;\n        const { newsData, loading, filepath} = this.state;\n        let filteredata = newsData.filter(item => item.image && item.title !=='');\n        const newsValues = commons.genricGrid(filteredata, gridRows, gridColumns);\n\n\n        return (\n          <div className={classes.root}>\n            {type === \"landing\" ? (\n              <Paper elevation={3}>\n                <div style={{ display: \"flex\" }}>\n                  <Typography variant=\"h6\" component=\"h6\" style={{ flex: 1 }}>\n                    {\" \"}\n                    Latest News\n                  </Typography>\n                  <ViewMorePage\n                    pathname=\"/newsdata\"\n                    title=\"VIEW ALL\"\n                    index={false}\n                  />\n                </div>\n                <Divider />\n                <Grid container justify=\"center\">\n                  {filteredata.length ? (\n                    newsValues.map((gridRow, gridIndex) => {\n                      let newsDetails = gridRow.colums;\n\n                      return (\n                        <Grid container spacing={2} key={gridIndex}>\n                          {newsDetails.map((newsRow, newsIndex) => {\n                            let gridColumnData = uiCommons.getGrid(gridColumns);\n                            if (newsIndex < gridColumns) {\n                              return (\n                                <Grid\n                                  item\n                                  md={gridColumnData.md}\n                                  xs={gridColumnData.xs}\n                                  key={newsIndex}\n                                  style={{ display: \"flex\" }}\n                                >\n                                  <Card style={{ display: \"flex\", margin: 5 }}>\n                                    <CardMedia\n                                      component=\"img\"\n                                      // image={newsRow.img}\n                                      className={classes.horiCardMedia}\n                                      src={\n                                        newsRow.image\n                                          ? API_URL +\n                                            `${filepath}` +\n                                            \"/\" +\n                                            `${newsRow.image}`\n                                          : \"\"\n                                      }\n                                    />\n                                    <CardContent\n                                      component={Link}\n                                      to={`/detailednews/${newsRow.id}`}\n                                    >\n                                      <Typography\n                                        className={classes.newsfont}\n                                        variant=\"h6\"\n                                      >\n                                        <Titlize value={newsRow.title} />\n                                      </Typography>\n                                    </CardContent>\n                                  </Card>\n                                </Grid>\n                              );\n                            }\n                          })}\n                        </Grid>\n                      );\n                    })\n                  ) : (\n                    <InfoComponent\n                      variant=\"h4\"\n                      message=\"No Data available yet!!!\"\n                    />\n                  )}\n                </Grid>\n              </Paper>\n            ) : (\n              <React.Fragment>\n                  <Topbar index={0}  />\n\n                {/* <Grid container justify=\"center\"> */}\n\n                <Grid\n                  spacing={1}\n                  alignItems=\"center\"\n                  justify=\"center\"\n                  align=\"center\"\n                  container\n                >\n                  {/* <Grid item xs={12} md={12}> */}\n\n                  <RefreshLoader display=\"overlay\" loading={loading} />\n\n                  <Paper elavation={1}>\n                    {newsData.length ? (\n                      newsData.map((value, index) => {\n                        return (\n                          <Card className={classes.card} key={index}>\n                            <Grid container>\n                              <Grid\n                                item\n                                xs={12}\n                                md={4}\n                                style={{ height: \"100%\" }}\n                              >\n                                <CardMedia\n                                  component=\"img\"\n                                  alt=\"\"\n                                  src={\n                                    value.image\n                                      ? API_URL +\n                                        `${filepath}` +\n                                        \"/\" +\n                                        `${value.image}`\n                                      : \"\"\n                                  }\n                                />\n                              </Grid>\n\n                              <Grid item xs={12} md={8}>\n                                <CardContent>\n                                  <Typography gutterBottom variant=\"h5\">\n                                    <Titlize\n                                      value={\n                                        value.title !== null ? value.title : \"\"\n                                      }\n                                    />\n                                  </Typography>\n                                  <Divider style={{ height: 2 }} />\n\n                                  <Typography>\n                                    <LinesEllipsis\n                                      text={\n                                        value.description !== null\n                                          ? ReactHtmlParser(value.description)\n                                          : \"\"\n                                      }\n                                      ellipsis=\"...\"\n                                      trimRight\n                                      basedOn=\"letters\"\n                                    />\n                                  </Typography>\n                                </CardContent>\n\n                                <CardActions className={classes.newscardaction}>\n                                  <Button\n                                    className={classes.buttonend}\n                                    component={Link}\n                                    // to={{\n                                    //   pathname: \"/detailednews\",\n                                    //   myCustomProps: value.id,\n                                    //   myCustomProps2: filepath\n                                    // }}\n                                    to={`/detailednews/${value.id}`}\n                                  >\n                                    Read more\n                                  </Button>\n                                </CardActions>\n                              </Grid>\n                            </Grid>\n                          </Card>\n                        );\n                      })\n                    ) : (\n                      <InfoComponent\n                        variant=\"h4\"\n                        message=\"No Data available yet!!!\"\n                      />\n                    )}\n                  </Paper>\n                </Grid>\n                {/* </Grid> */}\n                {/* </Grid> */}\n              </React.Fragment>\n            )}\n          </div>\n        );\n    }\n}\nexport default withRouter(withStyles(customStyles)(GenricNewsContent));","D:\\my-app\\src\\components\\tournaments\\commitedetails.js",[],"D:\\my-app\\src\\commons\\genricComponents\\charts.js",["581"],"import Chartist from \"chartist\";\nimport Legend from \"chartist-plugin-legend\";\n\nimport {  withRouter } from \"react-router-dom\";\nimport customStyles from \"../../styles/genricStyle\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\n\nimport { useEffect } from \"react\";\n\n//graph componet (chartist)\n\nvar delays2 = 80,\n  durations2 = 500;\n\nconst playerStat = {\n \n  data: {\n    labels: [\"MP\", \"FP\", \"T\", \"MM\", \"FM\"],\n    series: [1850, 1000, 1655, 1588, 1422],\n  },\n  \n  options: {\n    plugins: [\n      Chartist.plugins.legend({\n        legendNames: [\n          \"#Male Players\",\n          \"#Female Players\",\n          \"#Tournament\",\n          \"#Male Matches\",\n          \"#Female Matches\",\n        ],\n        \n      }),\n    ],\n\n        axisX: {\n      showGrid: true,\n      position: \"end\",\n    },\n    axisY: {\n      showGrid: true,\n      position: \"end\",\n    },\n   \n    \n       \n        low:0,\n      \n    distributeSeries: true,\n  },\n\n  responsiveOptions: [\n    [\n      \"screen and (max-width: 640px)\",\n      {\n        seriesBarDistance: 5,\n        axisX: {\n          labelInterpolationFnc: function (value) {\n            return value[0];\n          },\n        },\n      },\n    ],\n  ],\n  animation: {\n    draw: function (data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\",\n          },\n        });\n      }\n    },\n  },\n};\n\n\nconst Graph = () => {\n  useEffect(() => {\n    const script = document.createElement(\"link\");\n    script.href = \"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\";\n    script.rel = \"stylesheet\";\n    script.type = \"text/css\";\n    document.getElementsByClassName(\"ct-chart\")[0].appendChild(script);\n\n   new Chartist.Bar(\n     \".ct-chart\",\n     playerStat.data,\n     playerStat.options,\n     playerStat.responsiveOptions,\n     playerStat.animation\n   );\n  });\n       return (\n        \n           <div className=\"ct-chart\"/>\n       \n       );  \n};\n\n class Statistics extends Component {\n  render() {\n   \n\n    return (\n    \n        <Graph />\n     \n    );\n  }\n}\n\nexport default withRouter(withStyles(customStyles)(Statistics));\n\n","D:\\my-app\\src\\components\\MobileView\\responsiveDialouge.js",[],"D:\\my-app\\src\\formdata\\playerlist.js",[],"D:\\my-app\\src\\formdata\\rankingRespTableData.js",[],{"ruleId":"582","replacedBy":"583"},{"ruleId":"584","replacedBy":"585"},{"ruleId":"586","severity":1,"message":"587","line":47,"column":32,"nodeType":"588","endLine":47,"endColumn":51},{"ruleId":"589","severity":1,"message":"590","line":81,"column":53,"nodeType":"591","messageId":"592","endLine":81,"endColumn":54},{"ruleId":"589","severity":1,"message":"590","line":81,"column":59,"nodeType":"591","messageId":"592","endLine":81,"endColumn":60},{"ruleId":"593","severity":1,"message":"594","line":65,"column":49,"nodeType":"595","messageId":"596","endLine":65,"endColumn":51},{"ruleId":"593","severity":1,"message":"597","line":104,"column":26,"nodeType":"595","messageId":"598","endLine":104,"endColumn":28},{"ruleId":"593","severity":1,"message":"599","line":154,"column":31,"nodeType":"595","messageId":"598","endLine":154,"endColumn":33},{"ruleId":"593","severity":1,"message":"594","line":75,"column":49,"nodeType":"595","messageId":"596","endLine":75,"endColumn":51},{"ruleId":"593","severity":1,"message":"597","line":96,"column":26,"nodeType":"595","messageId":"598","endLine":96,"endColumn":28},{"ruleId":"593","severity":1,"message":"594","line":146,"column":39,"nodeType":"595","messageId":"596","endLine":146,"endColumn":41},{"ruleId":"593","severity":1,"message":"597","line":155,"column":28,"nodeType":"595","messageId":"598","endLine":155,"endColumn":30},{"ruleId":"593","severity":1,"message":"599","line":194,"column":31,"nodeType":"595","messageId":"598","endLine":194,"endColumn":33},{"ruleId":"593","severity":1,"message":"597","line":87,"column":39,"nodeType":"595","messageId":"598","endLine":87,"endColumn":41},{"ruleId":"593","severity":1,"message":"597","line":105,"column":39,"nodeType":"595","messageId":"598","endLine":105,"endColumn":41},{"ruleId":"593","severity":1,"message":"594","line":241,"column":39,"nodeType":"595","messageId":"596","endLine":241,"endColumn":41},{"ruleId":"593","severity":1,"message":"599","line":256,"column":31,"nodeType":"595","messageId":"598","endLine":256,"endColumn":33},{"ruleId":"593","severity":1,"message":"594","line":65,"column":49,"nodeType":"595","messageId":"596","endLine":65,"endColumn":51},{"ruleId":"593","severity":1,"message":"599","line":114,"column":26,"nodeType":"595","messageId":"598","endLine":114,"endColumn":28},{"ruleId":"600","severity":1,"message":"601","line":2,"column":17,"nodeType":"602","messageId":"603","endLine":2,"endColumn":26},{"ruleId":"600","severity":1,"message":"604","line":3,"column":35,"nodeType":"602","messageId":"603","endLine":3,"endColumn":42},{"ruleId":"600","severity":1,"message":"605","line":4,"column":8,"nodeType":"602","messageId":"603","endLine":4,"endColumn":23},{"ruleId":"600","severity":1,"message":"606","line":5,"column":10,"nodeType":"602","messageId":"603","endLine":5,"endColumn":19},{"ruleId":"600","severity":1,"message":"607","line":8,"column":8,"nodeType":"602","messageId":"603","endLine":8,"endColumn":18},{"ruleId":"582","replacedBy":"608"},{"ruleId":"584","replacedBy":"609"},{"ruleId":"586","severity":1,"message":"587","line":102,"column":32,"nodeType":"588","endLine":102,"endColumn":51},{"ruleId":"593","severity":1,"message":"597","line":130,"column":19,"nodeType":"595","messageId":"598","endLine":130,"endColumn":21},{"ruleId":"593","severity":1,"message":"597","line":135,"column":42,"nodeType":"595","messageId":"598","endLine":135,"endColumn":44},{"ruleId":"593","severity":1,"message":"599","line":44,"column":30,"nodeType":"595","messageId":"598","endLine":44,"endColumn":32},{"ruleId":"593","severity":1,"message":"594","line":57,"column":49,"nodeType":"595","messageId":"596","endLine":57,"endColumn":51},{"ruleId":"593","severity":1,"message":"597","line":65,"column":28,"nodeType":"595","messageId":"598","endLine":65,"endColumn":30},{"ruleId":"593","severity":1,"message":"610","line":124,"column":28,"nodeType":"595","messageId":"596","endLine":124,"endColumn":30},{"ruleId":"589","severity":1,"message":"590","line":310,"column":66,"nodeType":"591","messageId":"592","endLine":310,"endColumn":67},{"ruleId":"589","severity":1,"message":"590","line":310,"column":72,"nodeType":"591","messageId":"592","endLine":310,"endColumn":73},{"ruleId":"593","severity":1,"message":"597","line":8,"column":18,"nodeType":"595","messageId":"598","endLine":8,"endColumn":20},{"ruleId":"593","severity":1,"message":"599","line":75,"column":23,"nodeType":"595","messageId":"598","endLine":75,"endColumn":25},{"ruleId":"593","severity":1,"message":"597","line":105,"column":18,"nodeType":"595","messageId":"598","endLine":105,"endColumn":20},{"ruleId":"611","severity":1,"message":"612","line":21,"column":33,"nodeType":"613","messageId":"614","endLine":21,"endColumn":34,"suggestions":"615"},{"ruleId":"611","severity":1,"message":"612","line":21,"column":53,"nodeType":"613","messageId":"614","endLine":21,"endColumn":54,"suggestions":"616"},{"ruleId":"611","severity":1,"message":"617","line":38,"column":28,"nodeType":"613","messageId":"614","endLine":38,"endColumn":29,"suggestions":"618"},{"ruleId":"611","severity":1,"message":"619","line":38,"column":32,"nodeType":"613","messageId":"614","endLine":38,"endColumn":33,"suggestions":"620"},{"ruleId":"611","severity":1,"message":"621","line":38,"column":36,"nodeType":"613","messageId":"614","endLine":38,"endColumn":37,"suggestions":"622"},{"ruleId":"611","severity":1,"message":"617","line":43,"column":28,"nodeType":"613","messageId":"614","endLine":43,"endColumn":29,"suggestions":"623"},{"ruleId":"611","severity":1,"message":"619","line":43,"column":32,"nodeType":"613","messageId":"614","endLine":43,"endColumn":33,"suggestions":"624"},{"ruleId":"611","severity":1,"message":"621","line":43,"column":36,"nodeType":"613","messageId":"614","endLine":43,"endColumn":37,"suggestions":"625"},{"ruleId":"600","severity":1,"message":"626","line":2,"column":8,"nodeType":"602","messageId":"603","endLine":2,"endColumn":19},{"ruleId":"600","severity":1,"message":"627","line":3,"column":8,"nodeType":"602","messageId":"603","endLine":3,"endColumn":17},{"ruleId":"600","severity":1,"message":"628","line":5,"column":8,"nodeType":"602","messageId":"603","endLine":5,"endColumn":20},{"ruleId":"600","severity":1,"message":"629","line":6,"column":8,"nodeType":"602","messageId":"603","endLine":6,"endColumn":12},{"ruleId":"600","severity":1,"message":"630","line":7,"column":10,"nodeType":"602","messageId":"603","endLine":7,"endColumn":14},{"ruleId":"600","severity":1,"message":"631","line":11,"column":10,"nodeType":"602","messageId":"603","endLine":11,"endColumn":20},{"ruleId":"600","severity":1,"message":"632","line":13,"column":8,"nodeType":"602","messageId":"603","endLine":13,"endColumn":12},{"ruleId":"600","severity":1,"message":"633","line":16,"column":8,"nodeType":"602","messageId":"603","endLine":16,"endColumn":18},{"ruleId":"600","severity":1,"message":"634","line":20,"column":8,"nodeType":"602","messageId":"603","endLine":20,"endColumn":13},{"ruleId":"600","severity":1,"message":"635","line":25,"column":10,"nodeType":"602","messageId":"603","endLine":25,"endColumn":17},{"ruleId":"600","severity":1,"message":"636","line":26,"column":10,"nodeType":"602","messageId":"603","endLine":26,"endColumn":17},{"ruleId":"600","severity":1,"message":"637","line":47,"column":17,"nodeType":"602","messageId":"603","endLine":47,"endColumn":29},{"ruleId":"611","severity":1,"message":"638","line":60,"column":43,"nodeType":"613","messageId":"614","endLine":60,"endColumn":44,"suggestions":"639"},{"ruleId":"611","severity":1,"message":"638","line":60,"column":63,"nodeType":"613","messageId":"614","endLine":60,"endColumn":64,"suggestions":"640"},{"ruleId":"611","severity":1,"message":"638","line":60,"column":81,"nodeType":"613","messageId":"614","endLine":60,"endColumn":82,"suggestions":"641"},{"ruleId":"611","severity":1,"message":"638","line":60,"column":100,"nodeType":"613","messageId":"614","endLine":60,"endColumn":101,"suggestions":"642"},{"ruleId":"600","severity":1,"message":"643","line":75,"column":13,"nodeType":"602","messageId":"603","endLine":75,"endColumn":22},{"ruleId":"600","severity":1,"message":"644","line":80,"column":13,"nodeType":"602","messageId":"603","endLine":80,"endColumn":20},{"ruleId":"600","severity":1,"message":"637","line":81,"column":13,"nodeType":"602","messageId":"603","endLine":81,"endColumn":25},{"ruleId":"582","replacedBy":"645"},{"ruleId":"584","replacedBy":"646"},{"ruleId":"593","severity":1,"message":"597","line":67,"column":53,"nodeType":"595","messageId":"598","endLine":67,"endColumn":55},{"ruleId":"593","severity":1,"message":"594","line":148,"column":46,"nodeType":"595","messageId":"596","endLine":148,"endColumn":48},{"ruleId":"593","severity":1,"message":"597","line":160,"column":34,"nodeType":"595","messageId":"598","endLine":160,"endColumn":36},{"ruleId":"593","severity":1,"message":"599","line":220,"column":35,"nodeType":"595","messageId":"598","endLine":220,"endColumn":37},{"ruleId":"593","severity":1,"message":"597","line":310,"column":34,"nodeType":"595","messageId":"598","endLine":310,"endColumn":36},{"ruleId":"593","severity":1,"message":"597","line":317,"column":34,"nodeType":"595","messageId":"598","endLine":317,"endColumn":36},{"ruleId":"582","replacedBy":"647"},{"ruleId":"584","replacedBy":"648"},{"ruleId":"589","severity":1,"message":"590","line":116,"column":63,"nodeType":"591","messageId":"592","endLine":116,"endColumn":64},{"ruleId":"593","severity":1,"message":"599","line":46,"column":43,"nodeType":"595","messageId":"598","endLine":46,"endColumn":45},{"ruleId":"593","severity":1,"message":"597","line":59,"column":42,"nodeType":"595","messageId":"598","endLine":59,"endColumn":44},{"ruleId":"593","severity":1,"message":"599","line":60,"column":49,"nodeType":"595","messageId":"598","endLine":60,"endColumn":51},{"ruleId":"600","severity":1,"message":"633","line":1,"column":8,"nodeType":"602","messageId":"603","endLine":1,"endColumn":18},{"ruleId":"600","severity":1,"message":"649","line":3,"column":17,"nodeType":"602","messageId":"603","endLine":3,"endColumn":26},{"ruleId":"600","severity":1,"message":"650","line":94,"column":17,"nodeType":"602","messageId":"603","endLine":94,"endColumn":24},{"ruleId":"600","severity":1,"message":"644","line":94,"column":26,"nodeType":"602","messageId":"603","endLine":94,"endColumn":33},{"ruleId":"600","severity":1,"message":"651","line":95,"column":17,"nodeType":"602","messageId":"603","endLine":95,"endColumn":22},{"ruleId":"582","replacedBy":"652"},{"ruleId":"584","replacedBy":"653"},{"ruleId":"600","severity":1,"message":"637","line":89,"column":7,"nodeType":"602","messageId":"603","endLine":89,"endColumn":19},{"ruleId":"589","severity":1,"message":"590","line":86,"column":60,"nodeType":"591","messageId":"592","endLine":86,"endColumn":61},{"ruleId":"589","severity":1,"message":"590","line":86,"column":66,"nodeType":"591","messageId":"592","endLine":86,"endColumn":67},{"ruleId":"593","severity":1,"message":"654","line":95,"column":65,"nodeType":"595","messageId":"596","endLine":95,"endColumn":67},{"ruleId":"600","severity":1,"message":"655","line":2,"column":8,"nodeType":"602","messageId":"603","endLine":2,"endColumn":14},"no-native-reassign",["656"],"no-negated-in-lhs",["657"],"react/jsx-pascal-case","Imported JSX component component must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","Array.prototype.find() expects a return value from arrow function.","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Default' is defined but never used.","'ClubAssociation' is defined but never used.","'aboutMenu' is defined but never used.","'Mobileview' is defined but never used.",["656"],["657"],"Array.prototype.sort() expects a value to be returned at the end of arrow function.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["658","659"],["660","661"],"Unnecessary escape character: \\!.",["662","663"],"Unnecessary escape character: \\$.",["664","665"],"Unnecessary escape character: \\*.",["666","667"],["668","669"],["670","671"],["672","673"],"'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'ScheduleIcon' is defined but never used.","'Card' is defined but never used.","'Link' is defined but never used.","'makeStyles' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'Paper' is defined but never used.","'ApiCall' is defined but never used.","'commons' is defined but never used.","'tournamentId' is assigned a value but never used.","Unnecessary escape character: \\/.",["674","675"],["676","677"],["678","679"],["680","681"],"'buttonArr' is assigned a value but never used.","'loading' is assigned a value but never used.",["656"],["657"],["656"],["657"],"'Component' is defined but never used.","'classes' is assigned a value but never used.","'value' is assigned a value but never used.",["656"],["657"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","'Legend' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"682","fix":"683","desc":"684"},{"messageId":"685","fix":"686","desc":"687"},{"messageId":"682","fix":"688","desc":"684"},{"messageId":"685","fix":"689","desc":"687"},{"messageId":"682","fix":"690","desc":"684"},{"messageId":"685","fix":"691","desc":"687"},{"messageId":"682","fix":"692","desc":"684"},{"messageId":"685","fix":"693","desc":"687"},{"messageId":"682","fix":"694","desc":"684"},{"messageId":"685","fix":"695","desc":"687"},{"messageId":"682","fix":"696","desc":"684"},{"messageId":"685","fix":"697","desc":"687"},{"messageId":"682","fix":"698","desc":"684"},{"messageId":"685","fix":"699","desc":"687"},{"messageId":"682","fix":"700","desc":"684"},{"messageId":"685","fix":"701","desc":"687"},{"messageId":"682","fix":"702","desc":"684"},{"messageId":"685","fix":"703","desc":"687"},{"messageId":"682","fix":"704","desc":"684"},{"messageId":"685","fix":"705","desc":"687"},{"messageId":"682","fix":"706","desc":"684"},{"messageId":"685","fix":"707","desc":"687"},{"messageId":"682","fix":"708","desc":"684"},{"messageId":"685","fix":"709","desc":"687"},"removeEscape",{"range":"710","text":"711"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"712","text":"713"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"714","text":"711"},{"range":"715","text":"713"},{"range":"716","text":"711"},{"range":"717","text":"713"},{"range":"718","text":"711"},{"range":"719","text":"713"},{"range":"720","text":"711"},{"range":"721","text":"713"},{"range":"722","text":"711"},{"range":"723","text":"713"},{"range":"724","text":"711"},{"range":"725","text":"713"},{"range":"726","text":"711"},{"range":"727","text":"713"},{"range":"728","text":"711"},{"range":"729","text":"713"},{"range":"730","text":"711"},{"range":"731","text":"713"},{"range":"732","text":"711"},{"range":"733","text":"713"},{"range":"734","text":"711"},{"range":"735","text":"713"},[413,414],"",[413,413],"\\",[433,434],[433,433],[827,828],[827,827],[831,832],[831,831],[835,836],[835,835],[1009,1010],[1009,1009],[1013,1014],[1013,1013],[1017,1018],[1017,1017],[1688,1689],[1688,1688],[1708,1709],[1708,1708],[1726,1727],[1726,1726],[1745,1746],[1745,1745]]